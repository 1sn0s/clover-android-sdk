/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.survey;

import com.clover.sdk.GenericClient;

@SuppressWarnings("all")
/** NPS = Net Promoter Score. */
public final class NpsSurvey implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Unique identifier
   */
  public java.lang.String getId() {
    return genClient.cacheGet(CacheKey.id);
  }

  /**
   * Creation timestamp
   */
  public java.lang.Long getCreatedTime() {
    return genClient.cacheGet(CacheKey.createdTime);
  }

  /**
   * NPS rating that ranges from 0 to 10.
   */
  public java.lang.Integer getRating() {
    return genClient.cacheGet(CacheKey.rating);
  }

  /**
   * Optional reasoning for the selected rating.
   */
  public java.lang.String getReason() {
    return genClient.cacheGet(CacheKey.reason);
  }

  /**
   * The Merchant that took the survey.
   */
  public com.clover.sdk.v3.base.Reference getMerchant() {
    return genClient.cacheGet(CacheKey.merchant);
  }

  /**
   * The Employee that took the survey.
   */
  public com.clover.sdk.v3.base.Reference getEmployee() {
    return genClient.cacheGet(CacheKey.employee);
  }

  /**
   * Snapshot of the Merchant's Plan at the time the survey was taken.
   */
  public com.clover.sdk.v3.base.Reference getMerchantPlan() {
    return genClient.cacheGet(CacheKey.merchantPlan);
  }

  /**
   * Snapshot of the Employee System Role at the time the survey was taken.
   */
  public com.clover.sdk.v3.employees.AccountRole getEmployeeSystemRole() {
    return genClient.cacheGet(CacheKey.employeeSystemRole);
  }

  /**
   * The type of internet connection that the Merchant uses.
   */
  public com.clover.sdk.v3.survey.NetworkConnectionType getConnectionType() {
    return genClient.cacheGet(CacheKey.connectionType);
  }



  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<NpsSurvey> {
    id {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractOther("id", java.lang.String.class);
      }
    },
    createdTime {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractOther("createdTime", java.lang.Long.class);
      }
    },
    rating {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractOther("rating", java.lang.Integer.class);
      }
    },
    reason {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractOther("reason", java.lang.String.class);
      }
    },
    merchant {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractRecord("merchant", com.clover.sdk.v3.base.Reference.JSON_CREATOR);
      }
    },
    employee {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractRecord("employee", com.clover.sdk.v3.base.Reference.JSON_CREATOR);
      }
    },
    merchantPlan {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractRecord("merchantPlan", com.clover.sdk.v3.base.Reference.JSON_CREATOR);
      }
    },
    employeeSystemRole {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractEnum("employeeSystemRole", com.clover.sdk.v3.employees.AccountRole.class);
      }
    },
    connectionType {
      @Override
      public Object extractValue(NpsSurvey instance) {
        return instance.genClient.extractEnum("connectionType", com.clover.sdk.v3.survey.NetworkConnectionType.class);
      }
    },
    ;
  }

  private GenericClient<NpsSurvey> genClient = new GenericClient<NpsSurvey>(this);

  /**
   * Constructs a new empty instance.
   */
  public NpsSurvey() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public NpsSurvey(String json) throws IllegalArgumentException {
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public NpsSurvey(org.json.JSONObject jsonObject) {
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public NpsSurvey(NpsSurvey src) {
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }


  @Override
  public void validate() {
    genClient.validateLength(getId(), 13);

    genClient.validateNull(getRating(), "rating");
    if (getRating() != null && ( getRating() < 0 || getRating() > 10)) throw new IllegalArgumentException("Invalid value for 'getRating()'");

    genClient.validateLength(getReason(), 1000);

    genClient.validateNull(getMerchant(), "merchant");

    genClient.validateNull(getEmployee(), "employee");
  }

  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return genClient.cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'createdTime' field is set and is not null */
  public boolean isNotNullCreatedTime() {
    return genClient.cacheValueIsNotNull(CacheKey.createdTime);
  }

  /** Checks whether the 'rating' field is set and is not null */
  public boolean isNotNullRating() {
    return genClient.cacheValueIsNotNull(CacheKey.rating);
  }

  /** Checks whether the 'reason' field is set and is not null */
  public boolean isNotNullReason() {
    return genClient.cacheValueIsNotNull(CacheKey.reason);
  }

  /** Checks whether the 'merchant' field is set and is not null */
  public boolean isNotNullMerchant() {
    return genClient.cacheValueIsNotNull(CacheKey.merchant);
  }

  /** Checks whether the 'employee' field is set and is not null */
  public boolean isNotNullEmployee() {
    return genClient.cacheValueIsNotNull(CacheKey.employee);
  }

  /** Checks whether the 'merchantPlan' field is set and is not null */
  public boolean isNotNullMerchantPlan() {
    return genClient.cacheValueIsNotNull(CacheKey.merchantPlan);
  }

  /** Checks whether the 'employeeSystemRole' field is set and is not null */
  public boolean isNotNullEmployeeSystemRole() {
    return genClient.cacheValueIsNotNull(CacheKey.employeeSystemRole);
  }

  /** Checks whether the 'connectionType' field is set and is not null */
  public boolean isNotNullConnectionType() {
    return genClient.cacheValueIsNotNull(CacheKey.connectionType);
  }


  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return genClient.cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'createdTime' field has been set, however the value could be null */
  public boolean hasCreatedTime() {
    return genClient.cacheHasKey(CacheKey.createdTime);
  }

  /** Checks whether the 'rating' field has been set, however the value could be null */
  public boolean hasRating() {
    return genClient.cacheHasKey(CacheKey.rating);
  }

  /** Checks whether the 'reason' field has been set, however the value could be null */
  public boolean hasReason() {
    return genClient.cacheHasKey(CacheKey.reason);
  }

  /** Checks whether the 'merchant' field has been set, however the value could be null */
  public boolean hasMerchant() {
    return genClient.cacheHasKey(CacheKey.merchant);
  }

  /** Checks whether the 'employee' field has been set, however the value could be null */
  public boolean hasEmployee() {
    return genClient.cacheHasKey(CacheKey.employee);
  }

  /** Checks whether the 'merchantPlan' field has been set, however the value could be null */
  public boolean hasMerchantPlan() {
    return genClient.cacheHasKey(CacheKey.merchantPlan);
  }

  /** Checks whether the 'employeeSystemRole' field has been set, however the value could be null */
  public boolean hasEmployeeSystemRole() {
    return genClient.cacheHasKey(CacheKey.employeeSystemRole);
  }

  /** Checks whether the 'connectionType' field has been set, however the value could be null */
  public boolean hasConnectionType() {
    return genClient.cacheHasKey(CacheKey.connectionType);
  }


  /**
   * Sets the field 'id'.
   */
  public NpsSurvey setId(java.lang.String id) {
    return genClient.setOther(id, CacheKey.id);
  }

  /**
   * Sets the field 'createdTime'.
   */
  public NpsSurvey setCreatedTime(java.lang.Long createdTime) {
    return genClient.setOther(createdTime, CacheKey.createdTime);
  }

  /**
   * Sets the field 'rating'.
   */
  public NpsSurvey setRating(java.lang.Integer rating) {
    return genClient.setOther(rating, CacheKey.rating);
  }

  /**
   * Sets the field 'reason'.
   */
  public NpsSurvey setReason(java.lang.String reason) {
    return genClient.setOther(reason, CacheKey.reason);
  }

  /**
   * Sets the field 'merchant'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public NpsSurvey setMerchant(com.clover.sdk.v3.base.Reference merchant) {
    return genClient.setRecord(merchant, CacheKey.merchant);
  }

  /**
   * Sets the field 'employee'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public NpsSurvey setEmployee(com.clover.sdk.v3.base.Reference employee) {
    return genClient.setRecord(employee, CacheKey.employee);
  }

  /**
   * Sets the field 'merchantPlan'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public NpsSurvey setMerchantPlan(com.clover.sdk.v3.base.Reference merchantPlan) {
    return genClient.setRecord(merchantPlan, CacheKey.merchantPlan);
  }

  /**
   * Sets the field 'employeeSystemRole'.
   */
  public NpsSurvey setEmployeeSystemRole(com.clover.sdk.v3.employees.AccountRole employeeSystemRole) {
    return genClient.setOther(employeeSystemRole, CacheKey.employeeSystemRole);
  }

  /**
   * Sets the field 'connectionType'.
   */
  public NpsSurvey setConnectionType(com.clover.sdk.v3.survey.NetworkConnectionType connectionType) {
    return genClient.setOther(connectionType, CacheKey.connectionType);
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    genClient.clear(CacheKey.id);
  }
  /** Clears the 'createdTime' field, the 'has' method for this field will now return false */
  public void clearCreatedTime() {
    genClient.clear(CacheKey.createdTime);
  }
  /** Clears the 'rating' field, the 'has' method for this field will now return false */
  public void clearRating() {
    genClient.clear(CacheKey.rating);
  }
  /** Clears the 'reason' field, the 'has' method for this field will now return false */
  public void clearReason() {
    genClient.clear(CacheKey.reason);
  }
  /** Clears the 'merchant' field, the 'has' method for this field will now return false */
  public void clearMerchant() {
    genClient.clear(CacheKey.merchant);
  }
  /** Clears the 'employee' field, the 'has' method for this field will now return false */
  public void clearEmployee() {
    genClient.clear(CacheKey.employee);
  }
  /** Clears the 'merchantPlan' field, the 'has' method for this field will now return false */
  public void clearMerchantPlan() {
    genClient.clear(CacheKey.merchantPlan);
  }
  /** Clears the 'employeeSystemRole' field, the 'has' method for this field will now return false */
  public void clearEmployeeSystemRole() {
    genClient.clear(CacheKey.employeeSystemRole);
  }
  /** Clears the 'connectionType' field, the 'has' method for this field will now return false */
  public void clearConnectionType() {
    genClient.clear(CacheKey.connectionType);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public NpsSurvey copyChanges() {
    NpsSurvey copy = new NpsSurvey();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(NpsSurvey src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new NpsSurvey(src).getJSONObject(), src.genClient);
    }
  }

  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    return genClient.getBundle();
  }

  @Override
  public String toString() {
    return genClient.toString();
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
    genClient.writeToParcel(dest, flags);
  }

  public static final android.os.Parcelable.Creator<NpsSurvey> CREATOR = new android.os.Parcelable.Creator<NpsSurvey>() {
    @Override
    public NpsSurvey createFromParcel(android.os.Parcel in) {
      NpsSurvey instance = new NpsSurvey(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public NpsSurvey[] newArray(int size) {
      return new NpsSurvey[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<NpsSurvey> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<NpsSurvey>() {
    @Override
    public NpsSurvey create(org.json.JSONObject jsonObject) {
      return new NpsSurvey(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean CREATEDTIME_IS_REQUIRED = false;

    public static final boolean RATING_IS_REQUIRED = true;
    public static final long RATING_MIN = 0;
    public static final long RATING_MAX = 10;

    public static final boolean REASON_IS_REQUIRED = false;
    public static final long REASON_MAX_LEN = 1000;

    public static final boolean MERCHANT_IS_REQUIRED = true;

    public static final boolean EMPLOYEE_IS_REQUIRED = true;

    public static final boolean MERCHANTPLAN_IS_REQUIRED = false;

    public static final boolean EMPLOYEESYSTEMROLE_IS_REQUIRED = false;

    public static final boolean CONNECTIONTYPE_IS_REQUIRED = false;

  }

}
