/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.developer;

@SuppressWarnings("all")
public final class Developer implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {


  private enum CacheKey {
    id {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractId();
      }
    },
    name {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractName();
      }
    },
    firstName {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractFirstName();
      }
    },
    lastName {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractLastName();
      }
    },
    email {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractEmail();
      }
    },
    phone {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractPhone();
      }
    },
    dob {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractDob();
      }
    },
    ssn {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractSsn();
      }
    },
    address {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractAddress();
      }
    },
    city {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractCity();
      }
    },
    state {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractState();
      }
    },
    postalCode {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractPostalCode();
      }
    },
    bankAccountNumber {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBankAccountNumber();
      }
    },
    bankRoutingNumber {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBankRoutingNumber();
      }
    },
    businessLegalName {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBusinessLegalName();
      }
    },
    ein {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractEin();
      }
    },
    businessAddress {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBusinessAddress();
      }
    },
    businessCity {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBusinessCity();
      }
    },
    businessState {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBusinessState();
      }
    },
    businessPostalCode {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBusinessPostalCode();
      }
    },
    billingStatus {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBillingStatus();
      }
    },
    billingStatusMessage {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractBillingStatusMessage();
      }
    },
    website {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractWebsite();
      }
    },
    owner {
      @Override
      public Object extractValue(Developer instance) {
        return instance.extractOwner();
      }
    },
    ;

    public abstract Object extractValue(Developer instance);
  }

  private String jsonString = null;
  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public Developer() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public Developer(String json) {
    this.jsonString = json;
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public Developer(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public Developer(Developer src) {
    if (src.jsonString != null) {
      this.jsonString = src.jsonString;
    } else {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = new org.json.JSONObject(jsonString);
          jsonString = null; // null this so it will be recreated if jsonObject is modified
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String id = getId();
    if (id != null && id.length() > 13) throw new IllegalArgumentException("Maximum string length exceeded for 'id'");

    java.lang.String name = getName();
    if (name != null && name.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'name'");

    java.lang.String firstName = getFirstName();
    if (firstName != null && firstName.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'firstName'");

    java.lang.String lastName = getLastName();
    if (lastName != null && lastName.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'lastName'");

    java.lang.String email = getEmail();
    if (email != null && email.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'email'");

    java.lang.String phone = getPhone();
    if (phone != null && phone.length() > 25) throw new IllegalArgumentException("Maximum string length exceeded for 'phone'");

    java.lang.String dob = getDob();
    if (dob != null && dob.length() > 10) throw new IllegalArgumentException("Maximum string length exceeded for 'dob'");

    java.lang.String ssn = getSsn();
    if (ssn != null && ssn.length() > 9) throw new IllegalArgumentException("Maximum string length exceeded for 'ssn'");

    java.lang.String address = getAddress();
    if (address != null && address.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'address'");

    java.lang.String city = getCity();
    if (city != null && city.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'city'");

    java.lang.String state = getState();
    if (state != null && state.length() > 2) throw new IllegalArgumentException("Maximum string length exceeded for 'state'");

    java.lang.String postalCode = getPostalCode();
    if (postalCode != null && postalCode.length() > 20) throw new IllegalArgumentException("Maximum string length exceeded for 'postalCode'");

    java.lang.String bankAccountNumber = getBankAccountNumber();
    if (bankAccountNumber != null && bankAccountNumber.length() > 20) throw new IllegalArgumentException("Maximum string length exceeded for 'bankAccountNumber'");

    java.lang.String bankRoutingNumber = getBankRoutingNumber();
    if (bankRoutingNumber != null && bankRoutingNumber.length() > 9) throw new IllegalArgumentException("Maximum string length exceeded for 'bankRoutingNumber'");

    java.lang.String businessLegalName = getBusinessLegalName();
    if (businessLegalName != null && businessLegalName.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'businessLegalName'");

    java.lang.String ein = getEin();
    if (ein != null && ein.length() > 9) throw new IllegalArgumentException("Maximum string length exceeded for 'ein'");

    java.lang.String businessAddress = getBusinessAddress();
    if (businessAddress != null && businessAddress.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'businessAddress'");

    java.lang.String businessCity = getBusinessCity();
    if (businessCity != null && businessCity.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'businessCity'");

    java.lang.String businessState = getBusinessState();
    if (businessState != null && businessState.length() > 2) throw new IllegalArgumentException("Maximum string length exceeded for 'businessState'");

    java.lang.String businessPostalCode = getBusinessPostalCode();
    if (businessPostalCode != null && businessPostalCode.length() > 20) throw new IllegalArgumentException("Maximum string length exceeded for 'businessPostalCode'");

    java.lang.String billingStatus = getBillingStatus();
    if (billingStatus != null && billingStatus.length() > 10) throw new IllegalArgumentException("Maximum string length exceeded for 'billingStatus'");

    java.lang.String billingStatusMessage = getBillingStatusMessage();
    if (billingStatusMessage != null && billingStatusMessage.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'billingStatusMessage'");

    java.lang.String website = getWebsite();
    if (website != null && website.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'website'");
  }


  /**
   * Unique identifier
   */
  public java.lang.String getId() {
    return cacheGet(CacheKey.id);
  }

  private java.lang.String extractId() {
    return getJSONObject().isNull("id") ? null :
      getJSONObject().optString("id");
  }

  /**
   * Developer's name.  Could be a company name.  Whatever is to be shown as who made the app in App Marketplace, e.g. NoshList, Pioneer Works Inc., Seven Spaces, etc.  Also used as (optional) Business DBA (Doing Business Name) name when sending to Braintree for app billing background check.
   */
  public java.lang.String getName() {
    return cacheGet(CacheKey.name);
  }

  private java.lang.String extractName() {
    return getJSONObject().isNull("name") ? null :
      getJSONObject().optString("name");
  }

  /**
   * Developer's individual first name
   */
  public java.lang.String getFirstName() {
    return cacheGet(CacheKey.firstName);
  }

  private java.lang.String extractFirstName() {
    return getJSONObject().isNull("firstName") ? null :
      getJSONObject().optString("firstName");
  }

  /**
   * Developer's individual last name
   */
  public java.lang.String getLastName() {
    return cacheGet(CacheKey.lastName);
  }

  private java.lang.String extractLastName() {
    return getJSONObject().isNull("lastName") ? null :
      getJSONObject().optString("lastName");
  }

  /**
   * Developer's email
   */
  public java.lang.String getEmail() {
    return cacheGet(CacheKey.email);
  }

  private java.lang.String extractEmail() {
    return getJSONObject().isNull("email") ? null :
      getJSONObject().optString("email");
  }

  /**
   * Developer's phone
   */
  public java.lang.String getPhone() {
    return cacheGet(CacheKey.phone);
  }

  private java.lang.String extractPhone() {
    return getJSONObject().isNull("phone") ? null :
      getJSONObject().optString("phone");
  }

  /**
   * Developer's date of birth
   */
  public java.lang.String getDob() {
    return cacheGet(CacheKey.dob);
  }

  private java.lang.String extractDob() {
    return getJSONObject().isNull("dob") ? null :
      getJSONObject().optString("dob");
  }

  /**
   * Developer's SSN; won't be stored in DB
   */
  public java.lang.String getSsn() {
    return cacheGet(CacheKey.ssn);
  }

  private java.lang.String extractSsn() {
    return getJSONObject().isNull("ssn") ? null :
      getJSONObject().optString("ssn");
  }

  /**
   * Developer's address
   */
  public java.lang.String getAddress() {
    return cacheGet(CacheKey.address);
  }

  private java.lang.String extractAddress() {
    return getJSONObject().isNull("address") ? null :
      getJSONObject().optString("address");
  }

  /**
   * Developer's city
   */
  public java.lang.String getCity() {
    return cacheGet(CacheKey.city);
  }

  private java.lang.String extractCity() {
    return getJSONObject().isNull("city") ? null :
      getJSONObject().optString("city");
  }

  /**
   * Developer's state
   */
  public java.lang.String getState() {
    return cacheGet(CacheKey.state);
  }

  private java.lang.String extractState() {
    return getJSONObject().isNull("state") ? null :
      getJSONObject().optString("state");
  }

  /**
   * Developer's postal code
   */
  public java.lang.String getPostalCode() {
    return cacheGet(CacheKey.postalCode);
  }

  private java.lang.String extractPostalCode() {
    return getJSONObject().isNull("postalCode") ? null :
      getJSONObject().optString("postalCode");
  }

  /**
   * Developer's bank account number; won't be stored in DB
   */
  public java.lang.String getBankAccountNumber() {
    return cacheGet(CacheKey.bankAccountNumber);
  }

  private java.lang.String extractBankAccountNumber() {
    return getJSONObject().isNull("bankAccountNumber") ? null :
      getJSONObject().optString("bankAccountNumber");
  }

  /**
   * Developer's bank routing number
   */
  public java.lang.String getBankRoutingNumber() {
    return cacheGet(CacheKey.bankRoutingNumber);
  }

  private java.lang.String extractBankRoutingNumber() {
    return getJSONObject().isNull("bankRoutingNumber") ? null :
      getJSONObject().optString("bankRoutingNumber");
  }

  /**
   * Developer's business legal name
   */
  public java.lang.String getBusinessLegalName() {
    return cacheGet(CacheKey.businessLegalName);
  }

  private java.lang.String extractBusinessLegalName() {
    return getJSONObject().isNull("businessLegalName") ? null :
      getJSONObject().optString("businessLegalName");
  }

  /**
   * Developer's EIN; won't be stored in DB
   */
  public java.lang.String getEin() {
    return cacheGet(CacheKey.ein);
  }

  private java.lang.String extractEin() {
    return getJSONObject().isNull("ein") ? null :
      getJSONObject().optString("ein");
  }

  /**
   * Developer's business address
   */
  public java.lang.String getBusinessAddress() {
    return cacheGet(CacheKey.businessAddress);
  }

  private java.lang.String extractBusinessAddress() {
    return getJSONObject().isNull("businessAddress") ? null :
      getJSONObject().optString("businessAddress");
  }

  /**
   * Developer's business city
   */
  public java.lang.String getBusinessCity() {
    return cacheGet(CacheKey.businessCity);
  }

  private java.lang.String extractBusinessCity() {
    return getJSONObject().isNull("businessCity") ? null :
      getJSONObject().optString("businessCity");
  }

  /**
   * Developer's business state
   */
  public java.lang.String getBusinessState() {
    return cacheGet(CacheKey.businessState);
  }

  private java.lang.String extractBusinessState() {
    return getJSONObject().isNull("businessState") ? null :
      getJSONObject().optString("businessState");
  }

  /**
   * Developer's business postal code
   */
  public java.lang.String getBusinessPostalCode() {
    return cacheGet(CacheKey.businessPostalCode);
  }

  private java.lang.String extractBusinessPostalCode() {
    return getJSONObject().isNull("businessPostalCode") ? null :
      getJSONObject().optString("businessPostalCode");
  }

  /**
   * Developer's billing status
   */
  public java.lang.String getBillingStatus() {
    return cacheGet(CacheKey.billingStatus);
  }

  private java.lang.String extractBillingStatus() {
    return getJSONObject().isNull("billingStatus") ? null :
      getJSONObject().optString("billingStatus");
  }

  /**
   * Developer's billing status message
   */
  public java.lang.String getBillingStatusMessage() {
    return cacheGet(CacheKey.billingStatusMessage);
  }

  private java.lang.String extractBillingStatusMessage() {
    return getJSONObject().isNull("billingStatusMessage") ? null :
      getJSONObject().optString("billingStatusMessage");
  }

  /**
   * Developer's business website
   */
  public java.lang.String getWebsite() {
    return cacheGet(CacheKey.website);
  }

  private java.lang.String extractWebsite() {
    return getJSONObject().isNull("website") ? null :
      getJSONObject().optString("website");
  }

  /**
   * The user account that owns this developer account.
   *
   * The returned object is not a copy so changes to it will be reflected in this instance and vice-versa.
   */
  public com.clover.sdk.v3.base.Reference getOwner() {
    return cacheGet(CacheKey.owner);
  }

  private com.clover.sdk.v3.base.Reference extractOwner() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("owner");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.base.Reference(getJSONObject().optJSONObject("owner"));
    }
    return null;
  }


  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'firstName' field is set and is not null */
  public boolean isNotNullFirstName() {
    return cacheValueIsNotNull(CacheKey.firstName);
  }

  /** Checks whether the 'lastName' field is set and is not null */
  public boolean isNotNullLastName() {
    return cacheValueIsNotNull(CacheKey.lastName);
  }

  /** Checks whether the 'email' field is set and is not null */
  public boolean isNotNullEmail() {
    return cacheValueIsNotNull(CacheKey.email);
  }

  /** Checks whether the 'phone' field is set and is not null */
  public boolean isNotNullPhone() {
    return cacheValueIsNotNull(CacheKey.phone);
  }

  /** Checks whether the 'dob' field is set and is not null */
  public boolean isNotNullDob() {
    return cacheValueIsNotNull(CacheKey.dob);
  }

  /** Checks whether the 'ssn' field is set and is not null */
  public boolean isNotNullSsn() {
    return cacheValueIsNotNull(CacheKey.ssn);
  }

  /** Checks whether the 'address' field is set and is not null */
  public boolean isNotNullAddress() {
    return cacheValueIsNotNull(CacheKey.address);
  }

  /** Checks whether the 'city' field is set and is not null */
  public boolean isNotNullCity() {
    return cacheValueIsNotNull(CacheKey.city);
  }

  /** Checks whether the 'state' field is set and is not null */
  public boolean isNotNullState() {
    return cacheValueIsNotNull(CacheKey.state);
  }

  /** Checks whether the 'postalCode' field is set and is not null */
  public boolean isNotNullPostalCode() {
    return cacheValueIsNotNull(CacheKey.postalCode);
  }

  /** Checks whether the 'bankAccountNumber' field is set and is not null */
  public boolean isNotNullBankAccountNumber() {
    return cacheValueIsNotNull(CacheKey.bankAccountNumber);
  }

  /** Checks whether the 'bankRoutingNumber' field is set and is not null */
  public boolean isNotNullBankRoutingNumber() {
    return cacheValueIsNotNull(CacheKey.bankRoutingNumber);
  }

  /** Checks whether the 'businessLegalName' field is set and is not null */
  public boolean isNotNullBusinessLegalName() {
    return cacheValueIsNotNull(CacheKey.businessLegalName);
  }

  /** Checks whether the 'ein' field is set and is not null */
  public boolean isNotNullEin() {
    return cacheValueIsNotNull(CacheKey.ein);
  }

  /** Checks whether the 'businessAddress' field is set and is not null */
  public boolean isNotNullBusinessAddress() {
    return cacheValueIsNotNull(CacheKey.businessAddress);
  }

  /** Checks whether the 'businessCity' field is set and is not null */
  public boolean isNotNullBusinessCity() {
    return cacheValueIsNotNull(CacheKey.businessCity);
  }

  /** Checks whether the 'businessState' field is set and is not null */
  public boolean isNotNullBusinessState() {
    return cacheValueIsNotNull(CacheKey.businessState);
  }

  /** Checks whether the 'businessPostalCode' field is set and is not null */
  public boolean isNotNullBusinessPostalCode() {
    return cacheValueIsNotNull(CacheKey.businessPostalCode);
  }

  /** Checks whether the 'billingStatus' field is set and is not null */
  public boolean isNotNullBillingStatus() {
    return cacheValueIsNotNull(CacheKey.billingStatus);
  }

  /** Checks whether the 'billingStatusMessage' field is set and is not null */
  public boolean isNotNullBillingStatusMessage() {
    return cacheValueIsNotNull(CacheKey.billingStatusMessage);
  }

  /** Checks whether the 'website' field is set and is not null */
  public boolean isNotNullWebsite() {
    return cacheValueIsNotNull(CacheKey.website);
  }

  /** Checks whether the 'owner' field is set and is not null */
  public boolean isNotNullOwner() {
    return cacheValueIsNotNull(CacheKey.owner);
  }


  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'firstName' field has been set, however the value could be null */
  public boolean hasFirstName() {
    return cacheHasKey(CacheKey.firstName);
  }

  /** Checks whether the 'lastName' field has been set, however the value could be null */
  public boolean hasLastName() {
    return cacheHasKey(CacheKey.lastName);
  }

  /** Checks whether the 'email' field has been set, however the value could be null */
  public boolean hasEmail() {
    return cacheHasKey(CacheKey.email);
  }

  /** Checks whether the 'phone' field has been set, however the value could be null */
  public boolean hasPhone() {
    return cacheHasKey(CacheKey.phone);
  }

  /** Checks whether the 'dob' field has been set, however the value could be null */
  public boolean hasDob() {
    return cacheHasKey(CacheKey.dob);
  }

  /** Checks whether the 'ssn' field has been set, however the value could be null */
  public boolean hasSsn() {
    return cacheHasKey(CacheKey.ssn);
  }

  /** Checks whether the 'address' field has been set, however the value could be null */
  public boolean hasAddress() {
    return cacheHasKey(CacheKey.address);
  }

  /** Checks whether the 'city' field has been set, however the value could be null */
  public boolean hasCity() {
    return cacheHasKey(CacheKey.city);
  }

  /** Checks whether the 'state' field has been set, however the value could be null */
  public boolean hasState() {
    return cacheHasKey(CacheKey.state);
  }

  /** Checks whether the 'postalCode' field has been set, however the value could be null */
  public boolean hasPostalCode() {
    return cacheHasKey(CacheKey.postalCode);
  }

  /** Checks whether the 'bankAccountNumber' field has been set, however the value could be null */
  public boolean hasBankAccountNumber() {
    return cacheHasKey(CacheKey.bankAccountNumber);
  }

  /** Checks whether the 'bankRoutingNumber' field has been set, however the value could be null */
  public boolean hasBankRoutingNumber() {
    return cacheHasKey(CacheKey.bankRoutingNumber);
  }

  /** Checks whether the 'businessLegalName' field has been set, however the value could be null */
  public boolean hasBusinessLegalName() {
    return cacheHasKey(CacheKey.businessLegalName);
  }

  /** Checks whether the 'ein' field has been set, however the value could be null */
  public boolean hasEin() {
    return cacheHasKey(CacheKey.ein);
  }

  /** Checks whether the 'businessAddress' field has been set, however the value could be null */
  public boolean hasBusinessAddress() {
    return cacheHasKey(CacheKey.businessAddress);
  }

  /** Checks whether the 'businessCity' field has been set, however the value could be null */
  public boolean hasBusinessCity() {
    return cacheHasKey(CacheKey.businessCity);
  }

  /** Checks whether the 'businessState' field has been set, however the value could be null */
  public boolean hasBusinessState() {
    return cacheHasKey(CacheKey.businessState);
  }

  /** Checks whether the 'businessPostalCode' field has been set, however the value could be null */
  public boolean hasBusinessPostalCode() {
    return cacheHasKey(CacheKey.businessPostalCode);
  }

  /** Checks whether the 'billingStatus' field has been set, however the value could be null */
  public boolean hasBillingStatus() {
    return cacheHasKey(CacheKey.billingStatus);
  }

  /** Checks whether the 'billingStatusMessage' field has been set, however the value could be null */
  public boolean hasBillingStatusMessage() {
    return cacheHasKey(CacheKey.billingStatusMessage);
  }

  /** Checks whether the 'website' field has been set, however the value could be null */
  public boolean hasWebsite() {
    return cacheHasKey(CacheKey.website);
  }

  /** Checks whether the 'owner' field has been set, however the value could be null */
  public boolean hasOwner() {
    return cacheHasKey(CacheKey.owner);
  }


  /**
   * Sets the field 'id'.
   */
  public Developer setId(java.lang.String id) {
    logChange("id");

    try {
      getJSONObject().put("id", id == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(id));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.id);
    return this;
  }

  /**
   * Sets the field 'name'.
   */
  public Developer setName(java.lang.String name) {
    logChange("name");

    try {
      getJSONObject().put("name", name == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(name));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.name);
    return this;
  }

  /**
   * Sets the field 'firstName'.
   */
  public Developer setFirstName(java.lang.String firstName) {
    logChange("firstName");

    try {
      getJSONObject().put("firstName", firstName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(firstName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.firstName);
    return this;
  }

  /**
   * Sets the field 'lastName'.
   */
  public Developer setLastName(java.lang.String lastName) {
    logChange("lastName");

    try {
      getJSONObject().put("lastName", lastName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(lastName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.lastName);
    return this;
  }

  /**
   * Sets the field 'email'.
   */
  public Developer setEmail(java.lang.String email) {
    logChange("email");

    try {
      getJSONObject().put("email", email == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(email));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.email);
    return this;
  }

  /**
   * Sets the field 'phone'.
   */
  public Developer setPhone(java.lang.String phone) {
    logChange("phone");

    try {
      getJSONObject().put("phone", phone == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(phone));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.phone);
    return this;
  }

  /**
   * Sets the field 'dob'.
   */
  public Developer setDob(java.lang.String dob) {
    logChange("dob");

    try {
      getJSONObject().put("dob", dob == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(dob));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.dob);
    return this;
  }

  /**
   * Sets the field 'ssn'.
   */
  public Developer setSsn(java.lang.String ssn) {
    logChange("ssn");

    try {
      getJSONObject().put("ssn", ssn == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(ssn));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.ssn);
    return this;
  }

  /**
   * Sets the field 'address'.
   */
  public Developer setAddress(java.lang.String address) {
    logChange("address");

    try {
      getJSONObject().put("address", address == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(address));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.address);
    return this;
  }

  /**
   * Sets the field 'city'.
   */
  public Developer setCity(java.lang.String city) {
    logChange("city");

    try {
      getJSONObject().put("city", city == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(city));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.city);
    return this;
  }

  /**
   * Sets the field 'state'.
   */
  public Developer setState(java.lang.String state) {
    logChange("state");

    try {
      getJSONObject().put("state", state == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(state));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.state);
    return this;
  }

  /**
   * Sets the field 'postalCode'.
   */
  public Developer setPostalCode(java.lang.String postalCode) {
    logChange("postalCode");

    try {
      getJSONObject().put("postalCode", postalCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(postalCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.postalCode);
    return this;
  }

  /**
   * Sets the field 'bankAccountNumber'.
   */
  public Developer setBankAccountNumber(java.lang.String bankAccountNumber) {
    logChange("bankAccountNumber");

    try {
      getJSONObject().put("bankAccountNumber", bankAccountNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(bankAccountNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.bankAccountNumber);
    return this;
  }

  /**
   * Sets the field 'bankRoutingNumber'.
   */
  public Developer setBankRoutingNumber(java.lang.String bankRoutingNumber) {
    logChange("bankRoutingNumber");

    try {
      getJSONObject().put("bankRoutingNumber", bankRoutingNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(bankRoutingNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.bankRoutingNumber);
    return this;
  }

  /**
   * Sets the field 'businessLegalName'.
   */
  public Developer setBusinessLegalName(java.lang.String businessLegalName) {
    logChange("businessLegalName");

    try {
      getJSONObject().put("businessLegalName", businessLegalName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(businessLegalName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.businessLegalName);
    return this;
  }

  /**
   * Sets the field 'ein'.
   */
  public Developer setEin(java.lang.String ein) {
    logChange("ein");

    try {
      getJSONObject().put("ein", ein == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(ein));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.ein);
    return this;
  }

  /**
   * Sets the field 'businessAddress'.
   */
  public Developer setBusinessAddress(java.lang.String businessAddress) {
    logChange("businessAddress");

    try {
      getJSONObject().put("businessAddress", businessAddress == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(businessAddress));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.businessAddress);
    return this;
  }

  /**
   * Sets the field 'businessCity'.
   */
  public Developer setBusinessCity(java.lang.String businessCity) {
    logChange("businessCity");

    try {
      getJSONObject().put("businessCity", businessCity == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(businessCity));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.businessCity);
    return this;
  }

  /**
   * Sets the field 'businessState'.
   */
  public Developer setBusinessState(java.lang.String businessState) {
    logChange("businessState");

    try {
      getJSONObject().put("businessState", businessState == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(businessState));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.businessState);
    return this;
  }

  /**
   * Sets the field 'businessPostalCode'.
   */
  public Developer setBusinessPostalCode(java.lang.String businessPostalCode) {
    logChange("businessPostalCode");

    try {
      getJSONObject().put("businessPostalCode", businessPostalCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(businessPostalCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.businessPostalCode);
    return this;
  }

  /**
   * Sets the field 'billingStatus'.
   */
  public Developer setBillingStatus(java.lang.String billingStatus) {
    logChange("billingStatus");

    try {
      getJSONObject().put("billingStatus", billingStatus == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(billingStatus));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.billingStatus);
    return this;
  }

  /**
   * Sets the field 'billingStatusMessage'.
   */
  public Developer setBillingStatusMessage(java.lang.String billingStatusMessage) {
    logChange("billingStatusMessage");

    try {
      getJSONObject().put("billingStatusMessage", billingStatusMessage == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(billingStatusMessage));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.billingStatusMessage);
    return this;
  }

  /**
   * Sets the field 'website'.
   */
  public Developer setWebsite(java.lang.String website) {
    logChange("website");

    try {
      getJSONObject().put("website", website == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(website));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.website);
    return this;
  }

  /**
   * Sets the field 'owner'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Developer setOwner(com.clover.sdk.v3.base.Reference owner) {
    logChange("owner");

    try {
      getJSONObject().put("owner",
          owner == null ? org.json.JSONObject.NULL : owner.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.owner);
    return this;
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    unlogChange("id");
    getJSONObject().remove("id");
    cacheRemoveValue(CacheKey.id);
  }

  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    unlogChange("name");
    getJSONObject().remove("name");
    cacheRemoveValue(CacheKey.name);
  }

  /** Clears the 'firstName' field, the 'has' method for this field will now return false */
  public void clearFirstName() {
    unlogChange("firstName");
    getJSONObject().remove("firstName");
    cacheRemoveValue(CacheKey.firstName);
  }

  /** Clears the 'lastName' field, the 'has' method for this field will now return false */
  public void clearLastName() {
    unlogChange("lastName");
    getJSONObject().remove("lastName");
    cacheRemoveValue(CacheKey.lastName);
  }

  /** Clears the 'email' field, the 'has' method for this field will now return false */
  public void clearEmail() {
    unlogChange("email");
    getJSONObject().remove("email");
    cacheRemoveValue(CacheKey.email);
  }

  /** Clears the 'phone' field, the 'has' method for this field will now return false */
  public void clearPhone() {
    unlogChange("phone");
    getJSONObject().remove("phone");
    cacheRemoveValue(CacheKey.phone);
  }

  /** Clears the 'dob' field, the 'has' method for this field will now return false */
  public void clearDob() {
    unlogChange("dob");
    getJSONObject().remove("dob");
    cacheRemoveValue(CacheKey.dob);
  }

  /** Clears the 'ssn' field, the 'has' method for this field will now return false */
  public void clearSsn() {
    unlogChange("ssn");
    getJSONObject().remove("ssn");
    cacheRemoveValue(CacheKey.ssn);
  }

  /** Clears the 'address' field, the 'has' method for this field will now return false */
  public void clearAddress() {
    unlogChange("address");
    getJSONObject().remove("address");
    cacheRemoveValue(CacheKey.address);
  }

  /** Clears the 'city' field, the 'has' method for this field will now return false */
  public void clearCity() {
    unlogChange("city");
    getJSONObject().remove("city");
    cacheRemoveValue(CacheKey.city);
  }

  /** Clears the 'state' field, the 'has' method for this field will now return false */
  public void clearState() {
    unlogChange("state");
    getJSONObject().remove("state");
    cacheRemoveValue(CacheKey.state);
  }

  /** Clears the 'postalCode' field, the 'has' method for this field will now return false */
  public void clearPostalCode() {
    unlogChange("postalCode");
    getJSONObject().remove("postalCode");
    cacheRemoveValue(CacheKey.postalCode);
  }

  /** Clears the 'bankAccountNumber' field, the 'has' method for this field will now return false */
  public void clearBankAccountNumber() {
    unlogChange("bankAccountNumber");
    getJSONObject().remove("bankAccountNumber");
    cacheRemoveValue(CacheKey.bankAccountNumber);
  }

  /** Clears the 'bankRoutingNumber' field, the 'has' method for this field will now return false */
  public void clearBankRoutingNumber() {
    unlogChange("bankRoutingNumber");
    getJSONObject().remove("bankRoutingNumber");
    cacheRemoveValue(CacheKey.bankRoutingNumber);
  }

  /** Clears the 'businessLegalName' field, the 'has' method for this field will now return false */
  public void clearBusinessLegalName() {
    unlogChange("businessLegalName");
    getJSONObject().remove("businessLegalName");
    cacheRemoveValue(CacheKey.businessLegalName);
  }

  /** Clears the 'ein' field, the 'has' method for this field will now return false */
  public void clearEin() {
    unlogChange("ein");
    getJSONObject().remove("ein");
    cacheRemoveValue(CacheKey.ein);
  }

  /** Clears the 'businessAddress' field, the 'has' method for this field will now return false */
  public void clearBusinessAddress() {
    unlogChange("businessAddress");
    getJSONObject().remove("businessAddress");
    cacheRemoveValue(CacheKey.businessAddress);
  }

  /** Clears the 'businessCity' field, the 'has' method for this field will now return false */
  public void clearBusinessCity() {
    unlogChange("businessCity");
    getJSONObject().remove("businessCity");
    cacheRemoveValue(CacheKey.businessCity);
  }

  /** Clears the 'businessState' field, the 'has' method for this field will now return false */
  public void clearBusinessState() {
    unlogChange("businessState");
    getJSONObject().remove("businessState");
    cacheRemoveValue(CacheKey.businessState);
  }

  /** Clears the 'businessPostalCode' field, the 'has' method for this field will now return false */
  public void clearBusinessPostalCode() {
    unlogChange("businessPostalCode");
    getJSONObject().remove("businessPostalCode");
    cacheRemoveValue(CacheKey.businessPostalCode);
  }

  /** Clears the 'billingStatus' field, the 'has' method for this field will now return false */
  public void clearBillingStatus() {
    unlogChange("billingStatus");
    getJSONObject().remove("billingStatus");
    cacheRemoveValue(CacheKey.billingStatus);
  }

  /** Clears the 'billingStatusMessage' field, the 'has' method for this field will now return false */
  public void clearBillingStatusMessage() {
    unlogChange("billingStatusMessage");
    getJSONObject().remove("billingStatusMessage");
    cacheRemoveValue(CacheKey.billingStatusMessage);
  }

  /** Clears the 'website' field, the 'has' method for this field will now return false */
  public void clearWebsite() {
    unlogChange("website");
    getJSONObject().remove("website");
    cacheRemoveValue(CacheKey.website);
  }

  /** Clears the 'owner' field, the 'has' method for this field will now return false */
  public void clearOwner() {
    unlogChange("owner");
    getJSONObject().remove("owner");
    cacheRemoveValue(CacheKey.owner);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public Developer copyChanges() {
    Developer copy = new Developer();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(Developer src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new Developer(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = jsonString != null ? jsonString : getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "Developer{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<Developer> CREATOR = new android.os.Parcelable.Creator<Developer>() {
    @Override
    public Developer createFromParcel(android.os.Parcel in) {
      Developer instance = new Developer(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public Developer[] newArray(int size) {
      return new Developer[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<Developer> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<Developer>() {
    @Override
    public Developer create(org.json.JSONObject jsonObject) {
      return new Developer(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean NAME_IS_REQUIRED = false;
    public static final long NAME_MAX_LEN = 127;

    public static final boolean FIRSTNAME_IS_REQUIRED = false;
    public static final long FIRSTNAME_MAX_LEN = 127;

    public static final boolean LASTNAME_IS_REQUIRED = false;
    public static final long LASTNAME_MAX_LEN = 127;

    public static final boolean EMAIL_IS_REQUIRED = false;
    public static final long EMAIL_MAX_LEN = 127;

    public static final boolean PHONE_IS_REQUIRED = false;
    public static final long PHONE_MAX_LEN = 25;

    public static final boolean DOB_IS_REQUIRED = false;
    public static final long DOB_MAX_LEN = 10;

    public static final boolean SSN_IS_REQUIRED = false;
    public static final long SSN_MAX_LEN = 9;

    public static final boolean ADDRESS_IS_REQUIRED = false;
    public static final long ADDRESS_MAX_LEN = 255;

    public static final boolean CITY_IS_REQUIRED = false;
    public static final long CITY_MAX_LEN = 127;

    public static final boolean STATE_IS_REQUIRED = false;
    public static final long STATE_MAX_LEN = 2;

    public static final boolean POSTALCODE_IS_REQUIRED = false;
    public static final long POSTALCODE_MAX_LEN = 20;

    public static final boolean BANKACCOUNTNUMBER_IS_REQUIRED = false;
    public static final long BANKACCOUNTNUMBER_MAX_LEN = 20;

    public static final boolean BANKROUTINGNUMBER_IS_REQUIRED = false;
    public static final long BANKROUTINGNUMBER_MAX_LEN = 9;

    public static final boolean BUSINESSLEGALNAME_IS_REQUIRED = false;
    public static final long BUSINESSLEGALNAME_MAX_LEN = 255;

    public static final boolean EIN_IS_REQUIRED = false;
    public static final long EIN_MAX_LEN = 9;

    public static final boolean BUSINESSADDRESS_IS_REQUIRED = false;
    public static final long BUSINESSADDRESS_MAX_LEN = 255;

    public static final boolean BUSINESSCITY_IS_REQUIRED = false;
    public static final long BUSINESSCITY_MAX_LEN = 127;

    public static final boolean BUSINESSSTATE_IS_REQUIRED = false;
    public static final long BUSINESSSTATE_MAX_LEN = 2;

    public static final boolean BUSINESSPOSTALCODE_IS_REQUIRED = false;
    public static final long BUSINESSPOSTALCODE_MAX_LEN = 20;

    public static final boolean BILLINGSTATUS_IS_REQUIRED = false;
    public static final long BILLINGSTATUS_MAX_LEN = 10;

    public static final boolean BILLINGSTATUSMESSAGE_IS_REQUIRED = false;
    public static final long BILLINGSTATUSMESSAGE_MAX_LEN = 127;

    public static final boolean WEBSITE_IS_REQUIRED = false;
    public static final long WEBSITE_MAX_LEN = 255;

    public static final boolean OWNER_IS_REQUIRED = false;

  }

}
