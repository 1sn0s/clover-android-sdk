/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.app;

@SuppressWarnings("all")
public final class App implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {


  private enum CacheKey {
    id {
      @Override
      public Object extractValue(App instance) {
        return instance.extractId();
      }
    },
    name {
      @Override
      public Object extractValue(App instance) {
        return instance.extractName();
      }
    },
    published {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPublished();
      }
    },
    developer {
      @Override
      public Object extractValue(App instance) {
        return instance.extractDeveloper();
      }
    },
    description {
      @Override
      public Object extractValue(App instance) {
        return instance.extractDescription();
      }
    },
    activationUrl {
      @Override
      public Object extractValue(App instance) {
        return instance.extractActivationUrl();
      }
    },
    appDomain {
      @Override
      public Object extractValue(App instance) {
        return instance.extractAppDomain();
      }
    },
    androidVersion {
      @Override
      public Object extractValue(App instance) {
        return instance.extractAndroidVersion();
      }
    },
    packageName {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPackageName();
      }
    },
    approved {
      @Override
      public Object extractValue(App instance) {
        return instance.extractApproved();
      }
    },
    systemApp {
      @Override
      public Object extractValue(App instance) {
        return instance.extractSystemApp();
      }
    },
    filenameIcon {
      @Override
      public Object extractValue(App instance) {
        return instance.extractFilenameIcon();
      }
    },
    filenameIconSmall {
      @Override
      public Object extractValue(App instance) {
        return instance.extractFilenameIconSmall();
      }
    },
    filenameIconLarge {
      @Override
      public Object extractValue(App instance) {
        return instance.extractFilenameIconLarge();
      }
    },
    installCount {
      @Override
      public Object extractValue(App instance) {
        return instance.extractInstallCount();
      }
    },
    permissionMerchantRead {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionMerchantRead();
      }
    },
    permissionMerchantWrite {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionMerchantWrite();
      }
    },
    permissionCustomersRead {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionCustomersRead();
      }
    },
    permissionCustomersWrite {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionCustomersWrite();
      }
    },
    permissionInventoryRead {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionInventoryRead();
      }
    },
    permissionInventoryWrite {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionInventoryWrite();
      }
    },
    permissionOrdersRead {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionOrdersRead();
      }
    },
    permissionOrdersWrite {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionOrdersWrite();
      }
    },
    permissionPaymentsRead {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionPaymentsRead();
      }
    },
    permissionPaymentsWrite {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionPaymentsWrite();
      }
    },
    permissionEmployeesRead {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionEmployeesRead();
      }
    },
    permissionEmployeesWrite {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPermissionEmployeesWrite();
      }
    },
    privacyPolicy {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPrivacyPolicy();
      }
    },
    eula {
      @Override
      public Object extractValue(App instance) {
        return instance.extractEula();
      }
    },
    supportPhone {
      @Override
      public Object extractValue(App instance) {
        return instance.extractSupportPhone();
      }
    },
    supportEmail {
      @Override
      public Object extractValue(App instance) {
        return instance.extractSupportEmail();
      }
    },
    supportUrl {
      @Override
      public Object extractValue(App instance) {
        return instance.extractSupportUrl();
      }
    },
    productType {
      @Override
      public Object extractValue(App instance) {
        return instance.extractProductType();
      }
    },
    androidPermissions {
      @Override
      public Object extractValue(App instance) {
        return instance.extractAndroidPermissions();
      }
    },
    screenshots {
      @Override
      public Object extractValue(App instance) {
        return instance.extractScreenshots();
      }
    },
    availableSubscriptions {
      @Override
      public Object extractValue(App instance) {
        return instance.extractAvailableSubscriptions();
      }
    },
    availableMetereds {
      @Override
      public Object extractValue(App instance) {
        return instance.extractAvailableMetereds();
      }
    },
    isMerchantInTrial {
      @Override
      public Object extractValue(App instance) {
        return instance.extractIsMerchantInTrial();
      }
    },
    currentSubscription {
      @Override
      public Object extractValue(App instance) {
        return instance.extractCurrentSubscription();
      }
    },
    installed {
      @Override
      public Object extractValue(App instance) {
        return instance.extractInstalled();
      }
    },
    paidAppHasTrial {
      @Override
      public Object extractValue(App instance) {
        return instance.extractPaidAppHasTrial();
      }
    },
    ;

    public abstract Object extractValue(App instance);
  }

  private String jsonString = null;
  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public App() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public App(String json) {
    this.jsonString = json;
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public App(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public App(App src) {
    if (src.jsonString != null) {
      this.jsonString = src.jsonString;
    } else {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = new org.json.JSONObject(jsonString);
          jsonString = null; // null this so it will be recreated if jsonObject is modified
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String id = getId();
    if (id != null && id.length() > 13) throw new IllegalArgumentException("Maximum string length exceeded for 'id'");

    java.lang.String name = getName();
    if (name == null) throw new java.lang.IllegalArgumentException("'name' is required to be non-null");
    if (name != null && name.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'name'");

    java.lang.String description = getDescription();
    if (description != null && description.length() > 2000) throw new IllegalArgumentException("Maximum string length exceeded for 'description'");

    java.lang.String activationUrl = getActivationUrl();
    if (activationUrl != null && activationUrl.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'activationUrl'");

    java.lang.String appDomain = getAppDomain();
    if (appDomain != null && appDomain.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'appDomain'");

    java.lang.String packageName = getPackageName();
    if (packageName != null && packageName.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'packageName'");

    java.lang.String filenameIcon = getFilenameIcon();
    if (filenameIcon != null && filenameIcon.length() > 100) throw new IllegalArgumentException("Maximum string length exceeded for 'filenameIcon'");

    java.lang.String filenameIconSmall = getFilenameIconSmall();
    if (filenameIconSmall != null && filenameIconSmall.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'filenameIconSmall'");

    java.lang.String filenameIconLarge = getFilenameIconLarge();
    if (filenameIconLarge != null && filenameIconLarge.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'filenameIconLarge'");

    java.lang.String privacyPolicy = getPrivacyPolicy();
    if (privacyPolicy != null && privacyPolicy.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'privacyPolicy'");

    java.lang.String eula = getEula();
    if (eula != null && eula.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'eula'");

    java.lang.String supportPhone = getSupportPhone();
    if (supportPhone != null && supportPhone.length() > 25) throw new IllegalArgumentException("Maximum string length exceeded for 'supportPhone'");

    java.lang.String supportEmail = getSupportEmail();
    if (supportEmail != null && supportEmail.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'supportEmail'");

    java.lang.String supportUrl = getSupportUrl();
    if (supportUrl != null && supportUrl.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'supportUrl'");
  }


  /**
   */
  public java.lang.String getId() {
    return cacheGet(CacheKey.id);
  }

  private java.lang.String extractId() {
    return getJSONObject().isNull("id") ? null :
      getJSONObject().optString("id");
  }

  /**
   * Name of the app
   */
  public java.lang.String getName() {
    return cacheGet(CacheKey.name);
  }

  private java.lang.String extractName() {
    return getJSONObject().isNull("name") ? null :
      getJSONObject().optString("name");
  }

  /**
   */
  public java.lang.Boolean getPublished() {
    return cacheGet(CacheKey.published);
  }

  private java.lang.Boolean extractPublished() {
    return getJSONObject().isNull("published") ? null :
      getJSONObject().optBoolean("published");
  }

  /**
   *
   * The returned object is not a copy so changes to it will be reflected in this instance and vice-versa.
   */
  public com.clover.sdk.v3.developer.Developer getDeveloper() {
    return cacheGet(CacheKey.developer);
  }

  private com.clover.sdk.v3.developer.Developer extractDeveloper() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("developer");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.developer.Developer(getJSONObject().optJSONObject("developer"));
    }
    return null;
  }

  /**
   * App Description
   */
  public java.lang.String getDescription() {
    return cacheGet(CacheKey.description);
  }

  private java.lang.String extractDescription() {
    return getJSONObject().isNull("description") ? null :
      getJSONObject().optString("description");
  }

  /**
   * Activation url for oauth redirect and web app launch from appmarket.
   */
  public java.lang.String getActivationUrl() {
    return cacheGet(CacheKey.activationUrl);
  }

  private java.lang.String extractActivationUrl() {
    return getJSONObject().isNull("activationUrl") ? null :
      getJSONObject().optString("activationUrl");
  }

  /**
   */
  public java.lang.String getAppDomain() {
    return cacheGet(CacheKey.appDomain);
  }

  private java.lang.String extractAppDomain() {
    return getJSONObject().isNull("appDomain") ? null :
      getJSONObject().optString("appDomain");
  }

  /**
   *
   * The returned object is not a copy so changes to it will be reflected in this instance and vice-versa.
   */
  public com.clover.sdk.v3.app.AndroidVersion getAndroidVersion() {
    return cacheGet(CacheKey.androidVersion);
  }

  private com.clover.sdk.v3.app.AndroidVersion extractAndroidVersion() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("androidVersion");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.app.AndroidVersion(getJSONObject().optJSONObject("androidVersion"));
    }
    return null;
  }

  /**
   */
  public java.lang.String getPackageName() {
    return cacheGet(CacheKey.packageName);
  }

  private java.lang.String extractPackageName() {
    return getJSONObject().isNull("packageName") ? null :
      getJSONObject().optString("packageName");
  }

  /**
   */
  public java.lang.Boolean getApproved() {
    return cacheGet(CacheKey.approved);
  }

  private java.lang.Boolean extractApproved() {
    return getJSONObject().isNull("approved") ? null :
      getJSONObject().optBoolean("approved");
  }

  /**
   */
  public java.lang.Boolean getSystemApp() {
    return cacheGet(CacheKey.systemApp);
  }

  private java.lang.Boolean extractSystemApp() {
    return getJSONObject().isNull("systemApp") ? null :
      getJSONObject().optBoolean("systemApp");
  }

  /**
   */
  public java.lang.String getFilenameIcon() {
    return cacheGet(CacheKey.filenameIcon);
  }

  private java.lang.String extractFilenameIcon() {
    return getJSONObject().isNull("filenameIcon") ? null :
      getJSONObject().optString("filenameIcon");
  }

  /**
   * URL to the icon of the app. Generated from filenameIcon.
   */
  public java.lang.String getFilenameIconSmall() {
    return cacheGet(CacheKey.filenameIconSmall);
  }

  private java.lang.String extractFilenameIconSmall() {
    return getJSONObject().isNull("filenameIconSmall") ? null :
      getJSONObject().optString("filenameIconSmall");
  }

  /**
   * URL to the icon of the app. Generated from filenameIcon.
   */
  public java.lang.String getFilenameIconLarge() {
    return cacheGet(CacheKey.filenameIconLarge);
  }

  private java.lang.String extractFilenameIconLarge() {
    return getJSONObject().isNull("filenameIconLarge") ? null :
      getJSONObject().optString("filenameIconLarge");
  }

  /**
   */
  public java.lang.Long getInstallCount() {
    return cacheGet(CacheKey.installCount);
  }

  private java.lang.Long extractInstallCount() {
    return getJSONObject().isNull("installCount") ? null :
      getJSONObject().optLong("installCount");
  }

  /**
   */
  public java.lang.Boolean getPermissionMerchantRead() {
    return cacheGet(CacheKey.permissionMerchantRead);
  }

  private java.lang.Boolean extractPermissionMerchantRead() {
    return getJSONObject().isNull("permissionMerchantRead") ? null :
      getJSONObject().optBoolean("permissionMerchantRead");
  }

  /**
   */
  public java.lang.Boolean getPermissionMerchantWrite() {
    return cacheGet(CacheKey.permissionMerchantWrite);
  }

  private java.lang.Boolean extractPermissionMerchantWrite() {
    return getJSONObject().isNull("permissionMerchantWrite") ? null :
      getJSONObject().optBoolean("permissionMerchantWrite");
  }

  /**
   */
  public java.lang.Boolean getPermissionCustomersRead() {
    return cacheGet(CacheKey.permissionCustomersRead);
  }

  private java.lang.Boolean extractPermissionCustomersRead() {
    return getJSONObject().isNull("permissionCustomersRead") ? null :
      getJSONObject().optBoolean("permissionCustomersRead");
  }

  /**
   */
  public java.lang.Boolean getPermissionCustomersWrite() {
    return cacheGet(CacheKey.permissionCustomersWrite);
  }

  private java.lang.Boolean extractPermissionCustomersWrite() {
    return getJSONObject().isNull("permissionCustomersWrite") ? null :
      getJSONObject().optBoolean("permissionCustomersWrite");
  }

  /**
   */
  public java.lang.Boolean getPermissionInventoryRead() {
    return cacheGet(CacheKey.permissionInventoryRead);
  }

  private java.lang.Boolean extractPermissionInventoryRead() {
    return getJSONObject().isNull("permissionInventoryRead") ? null :
      getJSONObject().optBoolean("permissionInventoryRead");
  }

  /**
   */
  public java.lang.Boolean getPermissionInventoryWrite() {
    return cacheGet(CacheKey.permissionInventoryWrite);
  }

  private java.lang.Boolean extractPermissionInventoryWrite() {
    return getJSONObject().isNull("permissionInventoryWrite") ? null :
      getJSONObject().optBoolean("permissionInventoryWrite");
  }

  /**
   */
  public java.lang.Boolean getPermissionOrdersRead() {
    return cacheGet(CacheKey.permissionOrdersRead);
  }

  private java.lang.Boolean extractPermissionOrdersRead() {
    return getJSONObject().isNull("permissionOrdersRead") ? null :
      getJSONObject().optBoolean("permissionOrdersRead");
  }

  /**
   */
  public java.lang.Boolean getPermissionOrdersWrite() {
    return cacheGet(CacheKey.permissionOrdersWrite);
  }

  private java.lang.Boolean extractPermissionOrdersWrite() {
    return getJSONObject().isNull("permissionOrdersWrite") ? null :
      getJSONObject().optBoolean("permissionOrdersWrite");
  }

  /**
   */
  public java.lang.Boolean getPermissionPaymentsRead() {
    return cacheGet(CacheKey.permissionPaymentsRead);
  }

  private java.lang.Boolean extractPermissionPaymentsRead() {
    return getJSONObject().isNull("permissionPaymentsRead") ? null :
      getJSONObject().optBoolean("permissionPaymentsRead");
  }

  /**
   */
  public java.lang.Boolean getPermissionPaymentsWrite() {
    return cacheGet(CacheKey.permissionPaymentsWrite);
  }

  private java.lang.Boolean extractPermissionPaymentsWrite() {
    return getJSONObject().isNull("permissionPaymentsWrite") ? null :
      getJSONObject().optBoolean("permissionPaymentsWrite");
  }

  /**
   */
  public java.lang.Boolean getPermissionEmployeesRead() {
    return cacheGet(CacheKey.permissionEmployeesRead);
  }

  private java.lang.Boolean extractPermissionEmployeesRead() {
    return getJSONObject().isNull("permissionEmployeesRead") ? null :
      getJSONObject().optBoolean("permissionEmployeesRead");
  }

  /**
   */
  public java.lang.Boolean getPermissionEmployeesWrite() {
    return cacheGet(CacheKey.permissionEmployeesWrite);
  }

  private java.lang.Boolean extractPermissionEmployeesWrite() {
    return getJSONObject().isNull("permissionEmployeesWrite") ? null :
      getJSONObject().optBoolean("permissionEmployeesWrite");
  }

  /**
   */
  public java.lang.String getPrivacyPolicy() {
    return cacheGet(CacheKey.privacyPolicy);
  }

  private java.lang.String extractPrivacyPolicy() {
    return getJSONObject().isNull("privacyPolicy") ? null :
      getJSONObject().optString("privacyPolicy");
  }

  /**
   */
  public java.lang.String getEula() {
    return cacheGet(CacheKey.eula);
  }

  private java.lang.String extractEula() {
    return getJSONObject().isNull("eula") ? null :
      getJSONObject().optString("eula");
  }

  /**
   */
  public java.lang.String getSupportPhone() {
    return cacheGet(CacheKey.supportPhone);
  }

  private java.lang.String extractSupportPhone() {
    return getJSONObject().isNull("supportPhone") ? null :
      getJSONObject().optString("supportPhone");
  }

  /**
   */
  public java.lang.String getSupportEmail() {
    return cacheGet(CacheKey.supportEmail);
  }

  private java.lang.String extractSupportEmail() {
    return getJSONObject().isNull("supportEmail") ? null :
      getJSONObject().optString("supportEmail");
  }

  /**
   */
  public java.lang.String getSupportUrl() {
    return cacheGet(CacheKey.supportUrl);
  }

  private java.lang.String extractSupportUrl() {
    return getJSONObject().isNull("supportUrl") ? null :
      getJSONObject().optString("supportUrl");
  }

  /**
   */
  public com.clover.sdk.v3.app.ProductType getProductType() {
    return cacheGet(CacheKey.productType);
  }

  private com.clover.sdk.v3.app.ProductType extractProductType() {
    if (!getJSONObject().isNull("productType")) {
      try {
        return com.clover.sdk.v3.app.ProductType.valueOf(getJSONObject().optString("productType"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }

  /**
   * The app's android permissions
   *
   * The returned List is unmodifiable and will never contain any nulls, even if the source JSON had null entries.
   */
  public java.util.List<com.clover.sdk.v3.app.AndroidPermission> getAndroidPermissions() {
    return cacheGet(CacheKey.androidPermissions);
  }

  private java.util.List<com.clover.sdk.v3.app.AndroidPermission> extractAndroidPermissions() {
    if (getJSONObject().isNull("androidPermissions")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("androidPermissions");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.app.AndroidPermission> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.app.AndroidPermission>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.app.AndroidPermission item = new com.clover.sdk.v3.app.AndroidPermission(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }

  /**
   * The app's screenshots
   *
   * The returned List is unmodifiable and will never contain any nulls, even if the source JSON had null entries.
   */
  public java.util.List<com.clover.sdk.v3.app.Screenshot> getScreenshots() {
    return cacheGet(CacheKey.screenshots);
  }

  private java.util.List<com.clover.sdk.v3.app.Screenshot> extractScreenshots() {
    if (getJSONObject().isNull("screenshots")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("screenshots");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.app.Screenshot> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.app.Screenshot>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.app.Screenshot item = new com.clover.sdk.v3.app.Screenshot(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }

  /**
   * Subscription options for this app
   *
   * The returned List is unmodifiable and will never contain any nulls, even if the source JSON had null entries.
   */
  public java.util.List<com.clover.sdk.v3.app.AppSubscription> getAvailableSubscriptions() {
    return cacheGet(CacheKey.availableSubscriptions);
  }

  private java.util.List<com.clover.sdk.v3.app.AppSubscription> extractAvailableSubscriptions() {
    if (getJSONObject().isNull("availableSubscriptions")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("availableSubscriptions");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.app.AppSubscription> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.app.AppSubscription>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.app.AppSubscription item = new com.clover.sdk.v3.app.AppSubscription(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }

  /**
   * Metered options for this app
   *
   * The returned List is unmodifiable and will never contain any nulls, even if the source JSON had null entries.
   */
  public java.util.List<com.clover.sdk.v3.app.AppMetered> getAvailableMetereds() {
    return cacheGet(CacheKey.availableMetereds);
  }

  private java.util.List<com.clover.sdk.v3.app.AppMetered> extractAvailableMetereds() {
    if (getJSONObject().isNull("availableMetereds")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("availableMetereds");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.app.AppMetered> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.app.AppMetered>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.app.AppMetered item = new com.clover.sdk.v3.app.AppMetered(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }

  /**
   * If the merchant has the app installed, and the app is a paid app, and the app has a 30 day trial, this tells whether the merchant is in trial or not
   */
  public java.lang.Boolean getIsMerchantInTrial() {
    return cacheGet(CacheKey.isMerchantInTrial);
  }

  private java.lang.Boolean extractIsMerchantInTrial() {
    return getJSONObject().isNull("isMerchantInTrial") ? null :
      getJSONObject().optBoolean("isMerchantInTrial");
  }

  /**
   * The merchant's current subscription for this app
   *
   * The returned object is not a copy so changes to it will be reflected in this instance and vice-versa.
   */
  public com.clover.sdk.v3.app.AppSubscription getCurrentSubscription() {
    return cacheGet(CacheKey.currentSubscription);
  }

  private com.clover.sdk.v3.app.AppSubscription extractCurrentSubscription() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("currentSubscription");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.app.AppSubscription(getJSONObject().optJSONObject("currentSubscription"));
    }
    return null;
  }

  /**
   *  Whether the app is installed 
   */
  public java.lang.Boolean getInstalled() {
    return cacheGet(CacheKey.installed);
  }

  private java.lang.Boolean extractInstalled() {
    return getJSONObject().isNull("installed") ? null :
      getJSONObject().optBoolean("installed");
  }

  /**
   * If the app is a paid app, this tells whether is has a 30 day free trial or not
   */
  public java.lang.Boolean getPaidAppHasTrial() {
    return cacheGet(CacheKey.paidAppHasTrial);
  }

  private java.lang.Boolean extractPaidAppHasTrial() {
    return getJSONObject().isNull("paidAppHasTrial") ? null :
      getJSONObject().optBoolean("paidAppHasTrial");
  }


  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'published' field is set and is not null */
  public boolean isNotNullPublished() {
    return cacheValueIsNotNull(CacheKey.published);
  }

  /** Checks whether the 'developer' field is set and is not null */
  public boolean isNotNullDeveloper() {
    return cacheValueIsNotNull(CacheKey.developer);
  }

  /** Checks whether the 'description' field is set and is not null */
  public boolean isNotNullDescription() {
    return cacheValueIsNotNull(CacheKey.description);
  }

  /** Checks whether the 'activationUrl' field is set and is not null */
  public boolean isNotNullActivationUrl() {
    return cacheValueIsNotNull(CacheKey.activationUrl);
  }

  /** Checks whether the 'appDomain' field is set and is not null */
  public boolean isNotNullAppDomain() {
    return cacheValueIsNotNull(CacheKey.appDomain);
  }

  /** Checks whether the 'androidVersion' field is set and is not null */
  public boolean isNotNullAndroidVersion() {
    return cacheValueIsNotNull(CacheKey.androidVersion);
  }

  /** Checks whether the 'packageName' field is set and is not null */
  public boolean isNotNullPackageName() {
    return cacheValueIsNotNull(CacheKey.packageName);
  }

  /** Checks whether the 'approved' field is set and is not null */
  public boolean isNotNullApproved() {
    return cacheValueIsNotNull(CacheKey.approved);
  }

  /** Checks whether the 'systemApp' field is set and is not null */
  public boolean isNotNullSystemApp() {
    return cacheValueIsNotNull(CacheKey.systemApp);
  }

  /** Checks whether the 'filenameIcon' field is set and is not null */
  public boolean isNotNullFilenameIcon() {
    return cacheValueIsNotNull(CacheKey.filenameIcon);
  }

  /** Checks whether the 'filenameIconSmall' field is set and is not null */
  public boolean isNotNullFilenameIconSmall() {
    return cacheValueIsNotNull(CacheKey.filenameIconSmall);
  }

  /** Checks whether the 'filenameIconLarge' field is set and is not null */
  public boolean isNotNullFilenameIconLarge() {
    return cacheValueIsNotNull(CacheKey.filenameIconLarge);
  }

  /** Checks whether the 'installCount' field is set and is not null */
  public boolean isNotNullInstallCount() {
    return cacheValueIsNotNull(CacheKey.installCount);
  }

  /** Checks whether the 'permissionMerchantRead' field is set and is not null */
  public boolean isNotNullPermissionMerchantRead() {
    return cacheValueIsNotNull(CacheKey.permissionMerchantRead);
  }

  /** Checks whether the 'permissionMerchantWrite' field is set and is not null */
  public boolean isNotNullPermissionMerchantWrite() {
    return cacheValueIsNotNull(CacheKey.permissionMerchantWrite);
  }

  /** Checks whether the 'permissionCustomersRead' field is set and is not null */
  public boolean isNotNullPermissionCustomersRead() {
    return cacheValueIsNotNull(CacheKey.permissionCustomersRead);
  }

  /** Checks whether the 'permissionCustomersWrite' field is set and is not null */
  public boolean isNotNullPermissionCustomersWrite() {
    return cacheValueIsNotNull(CacheKey.permissionCustomersWrite);
  }

  /** Checks whether the 'permissionInventoryRead' field is set and is not null */
  public boolean isNotNullPermissionInventoryRead() {
    return cacheValueIsNotNull(CacheKey.permissionInventoryRead);
  }

  /** Checks whether the 'permissionInventoryWrite' field is set and is not null */
  public boolean isNotNullPermissionInventoryWrite() {
    return cacheValueIsNotNull(CacheKey.permissionInventoryWrite);
  }

  /** Checks whether the 'permissionOrdersRead' field is set and is not null */
  public boolean isNotNullPermissionOrdersRead() {
    return cacheValueIsNotNull(CacheKey.permissionOrdersRead);
  }

  /** Checks whether the 'permissionOrdersWrite' field is set and is not null */
  public boolean isNotNullPermissionOrdersWrite() {
    return cacheValueIsNotNull(CacheKey.permissionOrdersWrite);
  }

  /** Checks whether the 'permissionPaymentsRead' field is set and is not null */
  public boolean isNotNullPermissionPaymentsRead() {
    return cacheValueIsNotNull(CacheKey.permissionPaymentsRead);
  }

  /** Checks whether the 'permissionPaymentsWrite' field is set and is not null */
  public boolean isNotNullPermissionPaymentsWrite() {
    return cacheValueIsNotNull(CacheKey.permissionPaymentsWrite);
  }

  /** Checks whether the 'permissionEmployeesRead' field is set and is not null */
  public boolean isNotNullPermissionEmployeesRead() {
    return cacheValueIsNotNull(CacheKey.permissionEmployeesRead);
  }

  /** Checks whether the 'permissionEmployeesWrite' field is set and is not null */
  public boolean isNotNullPermissionEmployeesWrite() {
    return cacheValueIsNotNull(CacheKey.permissionEmployeesWrite);
  }

  /** Checks whether the 'privacyPolicy' field is set and is not null */
  public boolean isNotNullPrivacyPolicy() {
    return cacheValueIsNotNull(CacheKey.privacyPolicy);
  }

  /** Checks whether the 'eula' field is set and is not null */
  public boolean isNotNullEula() {
    return cacheValueIsNotNull(CacheKey.eula);
  }

  /** Checks whether the 'supportPhone' field is set and is not null */
  public boolean isNotNullSupportPhone() {
    return cacheValueIsNotNull(CacheKey.supportPhone);
  }

  /** Checks whether the 'supportEmail' field is set and is not null */
  public boolean isNotNullSupportEmail() {
    return cacheValueIsNotNull(CacheKey.supportEmail);
  }

  /** Checks whether the 'supportUrl' field is set and is not null */
  public boolean isNotNullSupportUrl() {
    return cacheValueIsNotNull(CacheKey.supportUrl);
  }

  /** Checks whether the 'productType' field is set and is not null */
  public boolean isNotNullProductType() {
    return cacheValueIsNotNull(CacheKey.productType);
  }

  /** Checks whether the 'androidPermissions' field is set and is not null */
  public boolean isNotNullAndroidPermissions() {
    return cacheValueIsNotNull(CacheKey.androidPermissions);
  }

  /** Checks whether the 'androidPermissions' field is set and is not null and is not empty */
  public boolean isNotEmptyAndroidPermissions() {
    return isNotNullAndroidPermissions() && !getAndroidPermissions().isEmpty();
  }

  /** Checks whether the 'screenshots' field is set and is not null */
  public boolean isNotNullScreenshots() {
    return cacheValueIsNotNull(CacheKey.screenshots);
  }

  /** Checks whether the 'screenshots' field is set and is not null and is not empty */
  public boolean isNotEmptyScreenshots() {
    return isNotNullScreenshots() && !getScreenshots().isEmpty();
  }

  /** Checks whether the 'availableSubscriptions' field is set and is not null */
  public boolean isNotNullAvailableSubscriptions() {
    return cacheValueIsNotNull(CacheKey.availableSubscriptions);
  }

  /** Checks whether the 'availableSubscriptions' field is set and is not null and is not empty */
  public boolean isNotEmptyAvailableSubscriptions() {
    return isNotNullAvailableSubscriptions() && !getAvailableSubscriptions().isEmpty();
  }

  /** Checks whether the 'availableMetereds' field is set and is not null */
  public boolean isNotNullAvailableMetereds() {
    return cacheValueIsNotNull(CacheKey.availableMetereds);
  }

  /** Checks whether the 'availableMetereds' field is set and is not null and is not empty */
  public boolean isNotEmptyAvailableMetereds() {
    return isNotNullAvailableMetereds() && !getAvailableMetereds().isEmpty();
  }

  /** Checks whether the 'isMerchantInTrial' field is set and is not null */
  public boolean isNotNullIsMerchantInTrial() {
    return cacheValueIsNotNull(CacheKey.isMerchantInTrial);
  }

  /** Checks whether the 'currentSubscription' field is set and is not null */
  public boolean isNotNullCurrentSubscription() {
    return cacheValueIsNotNull(CacheKey.currentSubscription);
  }

  /** Checks whether the 'installed' field is set and is not null */
  public boolean isNotNullInstalled() {
    return cacheValueIsNotNull(CacheKey.installed);
  }

  /** Checks whether the 'paidAppHasTrial' field is set and is not null */
  public boolean isNotNullPaidAppHasTrial() {
    return cacheValueIsNotNull(CacheKey.paidAppHasTrial);
  }


  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'published' field has been set, however the value could be null */
  public boolean hasPublished() {
    return cacheHasKey(CacheKey.published);
  }

  /** Checks whether the 'developer' field has been set, however the value could be null */
  public boolean hasDeveloper() {
    return cacheHasKey(CacheKey.developer);
  }

  /** Checks whether the 'description' field has been set, however the value could be null */
  public boolean hasDescription() {
    return cacheHasKey(CacheKey.description);
  }

  /** Checks whether the 'activationUrl' field has been set, however the value could be null */
  public boolean hasActivationUrl() {
    return cacheHasKey(CacheKey.activationUrl);
  }

  /** Checks whether the 'appDomain' field has been set, however the value could be null */
  public boolean hasAppDomain() {
    return cacheHasKey(CacheKey.appDomain);
  }

  /** Checks whether the 'androidVersion' field has been set, however the value could be null */
  public boolean hasAndroidVersion() {
    return cacheHasKey(CacheKey.androidVersion);
  }

  /** Checks whether the 'packageName' field has been set, however the value could be null */
  public boolean hasPackageName() {
    return cacheHasKey(CacheKey.packageName);
  }

  /** Checks whether the 'approved' field has been set, however the value could be null */
  public boolean hasApproved() {
    return cacheHasKey(CacheKey.approved);
  }

  /** Checks whether the 'systemApp' field has been set, however the value could be null */
  public boolean hasSystemApp() {
    return cacheHasKey(CacheKey.systemApp);
  }

  /** Checks whether the 'filenameIcon' field has been set, however the value could be null */
  public boolean hasFilenameIcon() {
    return cacheHasKey(CacheKey.filenameIcon);
  }

  /** Checks whether the 'filenameIconSmall' field has been set, however the value could be null */
  public boolean hasFilenameIconSmall() {
    return cacheHasKey(CacheKey.filenameIconSmall);
  }

  /** Checks whether the 'filenameIconLarge' field has been set, however the value could be null */
  public boolean hasFilenameIconLarge() {
    return cacheHasKey(CacheKey.filenameIconLarge);
  }

  /** Checks whether the 'installCount' field has been set, however the value could be null */
  public boolean hasInstallCount() {
    return cacheHasKey(CacheKey.installCount);
  }

  /** Checks whether the 'permissionMerchantRead' field has been set, however the value could be null */
  public boolean hasPermissionMerchantRead() {
    return cacheHasKey(CacheKey.permissionMerchantRead);
  }

  /** Checks whether the 'permissionMerchantWrite' field has been set, however the value could be null */
  public boolean hasPermissionMerchantWrite() {
    return cacheHasKey(CacheKey.permissionMerchantWrite);
  }

  /** Checks whether the 'permissionCustomersRead' field has been set, however the value could be null */
  public boolean hasPermissionCustomersRead() {
    return cacheHasKey(CacheKey.permissionCustomersRead);
  }

  /** Checks whether the 'permissionCustomersWrite' field has been set, however the value could be null */
  public boolean hasPermissionCustomersWrite() {
    return cacheHasKey(CacheKey.permissionCustomersWrite);
  }

  /** Checks whether the 'permissionInventoryRead' field has been set, however the value could be null */
  public boolean hasPermissionInventoryRead() {
    return cacheHasKey(CacheKey.permissionInventoryRead);
  }

  /** Checks whether the 'permissionInventoryWrite' field has been set, however the value could be null */
  public boolean hasPermissionInventoryWrite() {
    return cacheHasKey(CacheKey.permissionInventoryWrite);
  }

  /** Checks whether the 'permissionOrdersRead' field has been set, however the value could be null */
  public boolean hasPermissionOrdersRead() {
    return cacheHasKey(CacheKey.permissionOrdersRead);
  }

  /** Checks whether the 'permissionOrdersWrite' field has been set, however the value could be null */
  public boolean hasPermissionOrdersWrite() {
    return cacheHasKey(CacheKey.permissionOrdersWrite);
  }

  /** Checks whether the 'permissionPaymentsRead' field has been set, however the value could be null */
  public boolean hasPermissionPaymentsRead() {
    return cacheHasKey(CacheKey.permissionPaymentsRead);
  }

  /** Checks whether the 'permissionPaymentsWrite' field has been set, however the value could be null */
  public boolean hasPermissionPaymentsWrite() {
    return cacheHasKey(CacheKey.permissionPaymentsWrite);
  }

  /** Checks whether the 'permissionEmployeesRead' field has been set, however the value could be null */
  public boolean hasPermissionEmployeesRead() {
    return cacheHasKey(CacheKey.permissionEmployeesRead);
  }

  /** Checks whether the 'permissionEmployeesWrite' field has been set, however the value could be null */
  public boolean hasPermissionEmployeesWrite() {
    return cacheHasKey(CacheKey.permissionEmployeesWrite);
  }

  /** Checks whether the 'privacyPolicy' field has been set, however the value could be null */
  public boolean hasPrivacyPolicy() {
    return cacheHasKey(CacheKey.privacyPolicy);
  }

  /** Checks whether the 'eula' field has been set, however the value could be null */
  public boolean hasEula() {
    return cacheHasKey(CacheKey.eula);
  }

  /** Checks whether the 'supportPhone' field has been set, however the value could be null */
  public boolean hasSupportPhone() {
    return cacheHasKey(CacheKey.supportPhone);
  }

  /** Checks whether the 'supportEmail' field has been set, however the value could be null */
  public boolean hasSupportEmail() {
    return cacheHasKey(CacheKey.supportEmail);
  }

  /** Checks whether the 'supportUrl' field has been set, however the value could be null */
  public boolean hasSupportUrl() {
    return cacheHasKey(CacheKey.supportUrl);
  }

  /** Checks whether the 'productType' field has been set, however the value could be null */
  public boolean hasProductType() {
    return cacheHasKey(CacheKey.productType);
  }

  /** Checks whether the 'androidPermissions' field has been set, however the value could be null */
  public boolean hasAndroidPermissions() {
    return cacheHasKey(CacheKey.androidPermissions);
  }

  /** Checks whether the 'screenshots' field has been set, however the value could be null */
  public boolean hasScreenshots() {
    return cacheHasKey(CacheKey.screenshots);
  }

  /** Checks whether the 'availableSubscriptions' field has been set, however the value could be null */
  public boolean hasAvailableSubscriptions() {
    return cacheHasKey(CacheKey.availableSubscriptions);
  }

  /** Checks whether the 'availableMetereds' field has been set, however the value could be null */
  public boolean hasAvailableMetereds() {
    return cacheHasKey(CacheKey.availableMetereds);
  }

  /** Checks whether the 'isMerchantInTrial' field has been set, however the value could be null */
  public boolean hasIsMerchantInTrial() {
    return cacheHasKey(CacheKey.isMerchantInTrial);
  }

  /** Checks whether the 'currentSubscription' field has been set, however the value could be null */
  public boolean hasCurrentSubscription() {
    return cacheHasKey(CacheKey.currentSubscription);
  }

  /** Checks whether the 'installed' field has been set, however the value could be null */
  public boolean hasInstalled() {
    return cacheHasKey(CacheKey.installed);
  }

  /** Checks whether the 'paidAppHasTrial' field has been set, however the value could be null */
  public boolean hasPaidAppHasTrial() {
    return cacheHasKey(CacheKey.paidAppHasTrial);
  }


  /**
   * Sets the field 'id'.
   */
  public App setId(java.lang.String id) {
    logChange("id");

    try {
      getJSONObject().put("id", id == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(id));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.id);
    return this;
  }

  /**
   * Sets the field 'name'.
   */
  public App setName(java.lang.String name) {
    logChange("name");

    try {
      getJSONObject().put("name", name == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(name));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.name);
    return this;
  }

  /**
   * Sets the field 'published'.
   */
  public App setPublished(java.lang.Boolean published) {
    logChange("published");

    try {
      getJSONObject().put("published", published == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(published));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.published);
    return this;
  }

  /**
   * Sets the field 'developer'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public App setDeveloper(com.clover.sdk.v3.developer.Developer developer) {
    logChange("developer");

    try {
      getJSONObject().put("developer",
          developer == null ? org.json.JSONObject.NULL : developer.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.developer);
    return this;
  }

  /**
   * Sets the field 'description'.
   */
  public App setDescription(java.lang.String description) {
    logChange("description");

    try {
      getJSONObject().put("description", description == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(description));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.description);
    return this;
  }

  /**
   * Sets the field 'activationUrl'.
   */
  public App setActivationUrl(java.lang.String activationUrl) {
    logChange("activationUrl");

    try {
      getJSONObject().put("activationUrl", activationUrl == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(activationUrl));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.activationUrl);
    return this;
  }

  /**
   * Sets the field 'appDomain'.
   */
  public App setAppDomain(java.lang.String appDomain) {
    logChange("appDomain");

    try {
      getJSONObject().put("appDomain", appDomain == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(appDomain));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.appDomain);
    return this;
  }

  /**
   * Sets the field 'androidVersion'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public App setAndroidVersion(com.clover.sdk.v3.app.AndroidVersion androidVersion) {
    logChange("androidVersion");

    try {
      getJSONObject().put("androidVersion",
          androidVersion == null ? org.json.JSONObject.NULL : androidVersion.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.androidVersion);
    return this;
  }

  /**
   * Sets the field 'packageName'.
   */
  public App setPackageName(java.lang.String packageName) {
    logChange("packageName");

    try {
      getJSONObject().put("packageName", packageName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(packageName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.packageName);
    return this;
  }

  /**
   * Sets the field 'approved'.
   */
  public App setApproved(java.lang.Boolean approved) {
    logChange("approved");

    try {
      getJSONObject().put("approved", approved == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(approved));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.approved);
    return this;
  }

  /**
   * Sets the field 'systemApp'.
   */
  public App setSystemApp(java.lang.Boolean systemApp) {
    logChange("systemApp");

    try {
      getJSONObject().put("systemApp", systemApp == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(systemApp));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.systemApp);
    return this;
  }

  /**
   * Sets the field 'filenameIcon'.
   */
  public App setFilenameIcon(java.lang.String filenameIcon) {
    logChange("filenameIcon");

    try {
      getJSONObject().put("filenameIcon", filenameIcon == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(filenameIcon));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.filenameIcon);
    return this;
  }

  /**
   * Sets the field 'filenameIconSmall'.
   */
  public App setFilenameIconSmall(java.lang.String filenameIconSmall) {
    logChange("filenameIconSmall");

    try {
      getJSONObject().put("filenameIconSmall", filenameIconSmall == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(filenameIconSmall));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.filenameIconSmall);
    return this;
  }

  /**
   * Sets the field 'filenameIconLarge'.
   */
  public App setFilenameIconLarge(java.lang.String filenameIconLarge) {
    logChange("filenameIconLarge");

    try {
      getJSONObject().put("filenameIconLarge", filenameIconLarge == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(filenameIconLarge));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.filenameIconLarge);
    return this;
  }

  /**
   * Sets the field 'installCount'.
   */
  public App setInstallCount(java.lang.Long installCount) {
    logChange("installCount");

    try {
      getJSONObject().put("installCount", installCount == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(installCount));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.installCount);
    return this;
  }

  /**
   * Sets the field 'permissionMerchantRead'.
   */
  public App setPermissionMerchantRead(java.lang.Boolean permissionMerchantRead) {
    logChange("permissionMerchantRead");

    try {
      getJSONObject().put("permissionMerchantRead", permissionMerchantRead == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionMerchantRead));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionMerchantRead);
    return this;
  }

  /**
   * Sets the field 'permissionMerchantWrite'.
   */
  public App setPermissionMerchantWrite(java.lang.Boolean permissionMerchantWrite) {
    logChange("permissionMerchantWrite");

    try {
      getJSONObject().put("permissionMerchantWrite", permissionMerchantWrite == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionMerchantWrite));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionMerchantWrite);
    return this;
  }

  /**
   * Sets the field 'permissionCustomersRead'.
   */
  public App setPermissionCustomersRead(java.lang.Boolean permissionCustomersRead) {
    logChange("permissionCustomersRead");

    try {
      getJSONObject().put("permissionCustomersRead", permissionCustomersRead == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionCustomersRead));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionCustomersRead);
    return this;
  }

  /**
   * Sets the field 'permissionCustomersWrite'.
   */
  public App setPermissionCustomersWrite(java.lang.Boolean permissionCustomersWrite) {
    logChange("permissionCustomersWrite");

    try {
      getJSONObject().put("permissionCustomersWrite", permissionCustomersWrite == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionCustomersWrite));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionCustomersWrite);
    return this;
  }

  /**
   * Sets the field 'permissionInventoryRead'.
   */
  public App setPermissionInventoryRead(java.lang.Boolean permissionInventoryRead) {
    logChange("permissionInventoryRead");

    try {
      getJSONObject().put("permissionInventoryRead", permissionInventoryRead == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionInventoryRead));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionInventoryRead);
    return this;
  }

  /**
   * Sets the field 'permissionInventoryWrite'.
   */
  public App setPermissionInventoryWrite(java.lang.Boolean permissionInventoryWrite) {
    logChange("permissionInventoryWrite");

    try {
      getJSONObject().put("permissionInventoryWrite", permissionInventoryWrite == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionInventoryWrite));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionInventoryWrite);
    return this;
  }

  /**
   * Sets the field 'permissionOrdersRead'.
   */
  public App setPermissionOrdersRead(java.lang.Boolean permissionOrdersRead) {
    logChange("permissionOrdersRead");

    try {
      getJSONObject().put("permissionOrdersRead", permissionOrdersRead == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionOrdersRead));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionOrdersRead);
    return this;
  }

  /**
   * Sets the field 'permissionOrdersWrite'.
   */
  public App setPermissionOrdersWrite(java.lang.Boolean permissionOrdersWrite) {
    logChange("permissionOrdersWrite");

    try {
      getJSONObject().put("permissionOrdersWrite", permissionOrdersWrite == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionOrdersWrite));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionOrdersWrite);
    return this;
  }

  /**
   * Sets the field 'permissionPaymentsRead'.
   */
  public App setPermissionPaymentsRead(java.lang.Boolean permissionPaymentsRead) {
    logChange("permissionPaymentsRead");

    try {
      getJSONObject().put("permissionPaymentsRead", permissionPaymentsRead == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionPaymentsRead));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionPaymentsRead);
    return this;
  }

  /**
   * Sets the field 'permissionPaymentsWrite'.
   */
  public App setPermissionPaymentsWrite(java.lang.Boolean permissionPaymentsWrite) {
    logChange("permissionPaymentsWrite");

    try {
      getJSONObject().put("permissionPaymentsWrite", permissionPaymentsWrite == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionPaymentsWrite));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionPaymentsWrite);
    return this;
  }

  /**
   * Sets the field 'permissionEmployeesRead'.
   */
  public App setPermissionEmployeesRead(java.lang.Boolean permissionEmployeesRead) {
    logChange("permissionEmployeesRead");

    try {
      getJSONObject().put("permissionEmployeesRead", permissionEmployeesRead == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionEmployeesRead));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionEmployeesRead);
    return this;
  }

  /**
   * Sets the field 'permissionEmployeesWrite'.
   */
  public App setPermissionEmployeesWrite(java.lang.Boolean permissionEmployeesWrite) {
    logChange("permissionEmployeesWrite");

    try {
      getJSONObject().put("permissionEmployeesWrite", permissionEmployeesWrite == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(permissionEmployeesWrite));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.permissionEmployeesWrite);
    return this;
  }

  /**
   * Sets the field 'privacyPolicy'.
   */
  public App setPrivacyPolicy(java.lang.String privacyPolicy) {
    logChange("privacyPolicy");

    try {
      getJSONObject().put("privacyPolicy", privacyPolicy == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(privacyPolicy));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.privacyPolicy);
    return this;
  }

  /**
   * Sets the field 'eula'.
   */
  public App setEula(java.lang.String eula) {
    logChange("eula");

    try {
      getJSONObject().put("eula", eula == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(eula));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.eula);
    return this;
  }

  /**
   * Sets the field 'supportPhone'.
   */
  public App setSupportPhone(java.lang.String supportPhone) {
    logChange("supportPhone");

    try {
      getJSONObject().put("supportPhone", supportPhone == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(supportPhone));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.supportPhone);
    return this;
  }

  /**
   * Sets the field 'supportEmail'.
   */
  public App setSupportEmail(java.lang.String supportEmail) {
    logChange("supportEmail");

    try {
      getJSONObject().put("supportEmail", supportEmail == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(supportEmail));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.supportEmail);
    return this;
  }

  /**
   * Sets the field 'supportUrl'.
   */
  public App setSupportUrl(java.lang.String supportUrl) {
    logChange("supportUrl");

    try {
      getJSONObject().put("supportUrl", supportUrl == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(supportUrl));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.supportUrl);
    return this;
  }

  /**
   * Sets the field 'productType'.
   */
  public App setProductType(com.clover.sdk.v3.app.ProductType productType) {
    logChange("productType");

    try {
      getJSONObject().put("productType", productType == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(productType));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.productType);
    return this;
  }

  /**
   * Sets the field 'androidPermissions'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public App setAndroidPermissions(java.util.List<com.clover.sdk.v3.app.AndroidPermission> androidPermissions) {
    logChange("androidPermissions");

    try {
      if (androidPermissions == null) {
        getJSONObject().put("androidPermissions", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.androidPermissions);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.app.AndroidPermission obj : androidPermissions) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("androidPermissions", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.androidPermissions);
    return this;
  }

  /**
   * Sets the field 'screenshots'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public App setScreenshots(java.util.List<com.clover.sdk.v3.app.Screenshot> screenshots) {
    logChange("screenshots");

    try {
      if (screenshots == null) {
        getJSONObject().put("screenshots", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.screenshots);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.app.Screenshot obj : screenshots) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("screenshots", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.screenshots);
    return this;
  }

  /**
   * Sets the field 'availableSubscriptions'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public App setAvailableSubscriptions(java.util.List<com.clover.sdk.v3.app.AppSubscription> availableSubscriptions) {
    logChange("availableSubscriptions");

    try {
      if (availableSubscriptions == null) {
        getJSONObject().put("availableSubscriptions", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.availableSubscriptions);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.app.AppSubscription obj : availableSubscriptions) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("availableSubscriptions", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.availableSubscriptions);
    return this;
  }

  /**
   * Sets the field 'availableMetereds'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public App setAvailableMetereds(java.util.List<com.clover.sdk.v3.app.AppMetered> availableMetereds) {
    logChange("availableMetereds");

    try {
      if (availableMetereds == null) {
        getJSONObject().put("availableMetereds", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.availableMetereds);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.app.AppMetered obj : availableMetereds) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("availableMetereds", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.availableMetereds);
    return this;
  }

  /**
   * Sets the field 'isMerchantInTrial'.
   */
  public App setIsMerchantInTrial(java.lang.Boolean isMerchantInTrial) {
    logChange("isMerchantInTrial");

    try {
      getJSONObject().put("isMerchantInTrial", isMerchantInTrial == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(isMerchantInTrial));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.isMerchantInTrial);
    return this;
  }

  /**
   * Sets the field 'currentSubscription'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public App setCurrentSubscription(com.clover.sdk.v3.app.AppSubscription currentSubscription) {
    logChange("currentSubscription");

    try {
      getJSONObject().put("currentSubscription",
          currentSubscription == null ? org.json.JSONObject.NULL : currentSubscription.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.currentSubscription);
    return this;
  }

  /**
   * Sets the field 'installed'.
   */
  public App setInstalled(java.lang.Boolean installed) {
    logChange("installed");

    try {
      getJSONObject().put("installed", installed == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(installed));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.installed);
    return this;
  }

  /**
   * Sets the field 'paidAppHasTrial'.
   */
  public App setPaidAppHasTrial(java.lang.Boolean paidAppHasTrial) {
    logChange("paidAppHasTrial");

    try {
      getJSONObject().put("paidAppHasTrial", paidAppHasTrial == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(paidAppHasTrial));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.paidAppHasTrial);
    return this;
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    unlogChange("id");
    getJSONObject().remove("id");
    cacheRemoveValue(CacheKey.id);
  }

  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    unlogChange("name");
    getJSONObject().remove("name");
    cacheRemoveValue(CacheKey.name);
  }

  /** Clears the 'published' field, the 'has' method for this field will now return false */
  public void clearPublished() {
    unlogChange("published");
    getJSONObject().remove("published");
    cacheRemoveValue(CacheKey.published);
  }

  /** Clears the 'developer' field, the 'has' method for this field will now return false */
  public void clearDeveloper() {
    unlogChange("developer");
    getJSONObject().remove("developer");
    cacheRemoveValue(CacheKey.developer);
  }

  /** Clears the 'description' field, the 'has' method for this field will now return false */
  public void clearDescription() {
    unlogChange("description");
    getJSONObject().remove("description");
    cacheRemoveValue(CacheKey.description);
  }

  /** Clears the 'activationUrl' field, the 'has' method for this field will now return false */
  public void clearActivationUrl() {
    unlogChange("activationUrl");
    getJSONObject().remove("activationUrl");
    cacheRemoveValue(CacheKey.activationUrl);
  }

  /** Clears the 'appDomain' field, the 'has' method for this field will now return false */
  public void clearAppDomain() {
    unlogChange("appDomain");
    getJSONObject().remove("appDomain");
    cacheRemoveValue(CacheKey.appDomain);
  }

  /** Clears the 'androidVersion' field, the 'has' method for this field will now return false */
  public void clearAndroidVersion() {
    unlogChange("androidVersion");
    getJSONObject().remove("androidVersion");
    cacheRemoveValue(CacheKey.androidVersion);
  }

  /** Clears the 'packageName' field, the 'has' method for this field will now return false */
  public void clearPackageName() {
    unlogChange("packageName");
    getJSONObject().remove("packageName");
    cacheRemoveValue(CacheKey.packageName);
  }

  /** Clears the 'approved' field, the 'has' method for this field will now return false */
  public void clearApproved() {
    unlogChange("approved");
    getJSONObject().remove("approved");
    cacheRemoveValue(CacheKey.approved);
  }

  /** Clears the 'systemApp' field, the 'has' method for this field will now return false */
  public void clearSystemApp() {
    unlogChange("systemApp");
    getJSONObject().remove("systemApp");
    cacheRemoveValue(CacheKey.systemApp);
  }

  /** Clears the 'filenameIcon' field, the 'has' method for this field will now return false */
  public void clearFilenameIcon() {
    unlogChange("filenameIcon");
    getJSONObject().remove("filenameIcon");
    cacheRemoveValue(CacheKey.filenameIcon);
  }

  /** Clears the 'filenameIconSmall' field, the 'has' method for this field will now return false */
  public void clearFilenameIconSmall() {
    unlogChange("filenameIconSmall");
    getJSONObject().remove("filenameIconSmall");
    cacheRemoveValue(CacheKey.filenameIconSmall);
  }

  /** Clears the 'filenameIconLarge' field, the 'has' method for this field will now return false */
  public void clearFilenameIconLarge() {
    unlogChange("filenameIconLarge");
    getJSONObject().remove("filenameIconLarge");
    cacheRemoveValue(CacheKey.filenameIconLarge);
  }

  /** Clears the 'installCount' field, the 'has' method for this field will now return false */
  public void clearInstallCount() {
    unlogChange("installCount");
    getJSONObject().remove("installCount");
    cacheRemoveValue(CacheKey.installCount);
  }

  /** Clears the 'permissionMerchantRead' field, the 'has' method for this field will now return false */
  public void clearPermissionMerchantRead() {
    unlogChange("permissionMerchantRead");
    getJSONObject().remove("permissionMerchantRead");
    cacheRemoveValue(CacheKey.permissionMerchantRead);
  }

  /** Clears the 'permissionMerchantWrite' field, the 'has' method for this field will now return false */
  public void clearPermissionMerchantWrite() {
    unlogChange("permissionMerchantWrite");
    getJSONObject().remove("permissionMerchantWrite");
    cacheRemoveValue(CacheKey.permissionMerchantWrite);
  }

  /** Clears the 'permissionCustomersRead' field, the 'has' method for this field will now return false */
  public void clearPermissionCustomersRead() {
    unlogChange("permissionCustomersRead");
    getJSONObject().remove("permissionCustomersRead");
    cacheRemoveValue(CacheKey.permissionCustomersRead);
  }

  /** Clears the 'permissionCustomersWrite' field, the 'has' method for this field will now return false */
  public void clearPermissionCustomersWrite() {
    unlogChange("permissionCustomersWrite");
    getJSONObject().remove("permissionCustomersWrite");
    cacheRemoveValue(CacheKey.permissionCustomersWrite);
  }

  /** Clears the 'permissionInventoryRead' field, the 'has' method for this field will now return false */
  public void clearPermissionInventoryRead() {
    unlogChange("permissionInventoryRead");
    getJSONObject().remove("permissionInventoryRead");
    cacheRemoveValue(CacheKey.permissionInventoryRead);
  }

  /** Clears the 'permissionInventoryWrite' field, the 'has' method for this field will now return false */
  public void clearPermissionInventoryWrite() {
    unlogChange("permissionInventoryWrite");
    getJSONObject().remove("permissionInventoryWrite");
    cacheRemoveValue(CacheKey.permissionInventoryWrite);
  }

  /** Clears the 'permissionOrdersRead' field, the 'has' method for this field will now return false */
  public void clearPermissionOrdersRead() {
    unlogChange("permissionOrdersRead");
    getJSONObject().remove("permissionOrdersRead");
    cacheRemoveValue(CacheKey.permissionOrdersRead);
  }

  /** Clears the 'permissionOrdersWrite' field, the 'has' method for this field will now return false */
  public void clearPermissionOrdersWrite() {
    unlogChange("permissionOrdersWrite");
    getJSONObject().remove("permissionOrdersWrite");
    cacheRemoveValue(CacheKey.permissionOrdersWrite);
  }

  /** Clears the 'permissionPaymentsRead' field, the 'has' method for this field will now return false */
  public void clearPermissionPaymentsRead() {
    unlogChange("permissionPaymentsRead");
    getJSONObject().remove("permissionPaymentsRead");
    cacheRemoveValue(CacheKey.permissionPaymentsRead);
  }

  /** Clears the 'permissionPaymentsWrite' field, the 'has' method for this field will now return false */
  public void clearPermissionPaymentsWrite() {
    unlogChange("permissionPaymentsWrite");
    getJSONObject().remove("permissionPaymentsWrite");
    cacheRemoveValue(CacheKey.permissionPaymentsWrite);
  }

  /** Clears the 'permissionEmployeesRead' field, the 'has' method for this field will now return false */
  public void clearPermissionEmployeesRead() {
    unlogChange("permissionEmployeesRead");
    getJSONObject().remove("permissionEmployeesRead");
    cacheRemoveValue(CacheKey.permissionEmployeesRead);
  }

  /** Clears the 'permissionEmployeesWrite' field, the 'has' method for this field will now return false */
  public void clearPermissionEmployeesWrite() {
    unlogChange("permissionEmployeesWrite");
    getJSONObject().remove("permissionEmployeesWrite");
    cacheRemoveValue(CacheKey.permissionEmployeesWrite);
  }

  /** Clears the 'privacyPolicy' field, the 'has' method for this field will now return false */
  public void clearPrivacyPolicy() {
    unlogChange("privacyPolicy");
    getJSONObject().remove("privacyPolicy");
    cacheRemoveValue(CacheKey.privacyPolicy);
  }

  /** Clears the 'eula' field, the 'has' method for this field will now return false */
  public void clearEula() {
    unlogChange("eula");
    getJSONObject().remove("eula");
    cacheRemoveValue(CacheKey.eula);
  }

  /** Clears the 'supportPhone' field, the 'has' method for this field will now return false */
  public void clearSupportPhone() {
    unlogChange("supportPhone");
    getJSONObject().remove("supportPhone");
    cacheRemoveValue(CacheKey.supportPhone);
  }

  /** Clears the 'supportEmail' field, the 'has' method for this field will now return false */
  public void clearSupportEmail() {
    unlogChange("supportEmail");
    getJSONObject().remove("supportEmail");
    cacheRemoveValue(CacheKey.supportEmail);
  }

  /** Clears the 'supportUrl' field, the 'has' method for this field will now return false */
  public void clearSupportUrl() {
    unlogChange("supportUrl");
    getJSONObject().remove("supportUrl");
    cacheRemoveValue(CacheKey.supportUrl);
  }

  /** Clears the 'productType' field, the 'has' method for this field will now return false */
  public void clearProductType() {
    unlogChange("productType");
    getJSONObject().remove("productType");
    cacheRemoveValue(CacheKey.productType);
  }

  /** Clears the 'androidPermissions' field, the 'has' method for this field will now return false */
  public void clearAndroidPermissions() {
    unlogChange("androidPermissions");
    getJSONObject().remove("androidPermissions");
    cacheRemoveValue(CacheKey.androidPermissions);
  }

  /** Clears the 'screenshots' field, the 'has' method for this field will now return false */
  public void clearScreenshots() {
    unlogChange("screenshots");
    getJSONObject().remove("screenshots");
    cacheRemoveValue(CacheKey.screenshots);
  }

  /** Clears the 'availableSubscriptions' field, the 'has' method for this field will now return false */
  public void clearAvailableSubscriptions() {
    unlogChange("availableSubscriptions");
    getJSONObject().remove("availableSubscriptions");
    cacheRemoveValue(CacheKey.availableSubscriptions);
  }

  /** Clears the 'availableMetereds' field, the 'has' method for this field will now return false */
  public void clearAvailableMetereds() {
    unlogChange("availableMetereds");
    getJSONObject().remove("availableMetereds");
    cacheRemoveValue(CacheKey.availableMetereds);
  }

  /** Clears the 'isMerchantInTrial' field, the 'has' method for this field will now return false */
  public void clearIsMerchantInTrial() {
    unlogChange("isMerchantInTrial");
    getJSONObject().remove("isMerchantInTrial");
    cacheRemoveValue(CacheKey.isMerchantInTrial);
  }

  /** Clears the 'currentSubscription' field, the 'has' method for this field will now return false */
  public void clearCurrentSubscription() {
    unlogChange("currentSubscription");
    getJSONObject().remove("currentSubscription");
    cacheRemoveValue(CacheKey.currentSubscription);
  }

  /** Clears the 'installed' field, the 'has' method for this field will now return false */
  public void clearInstalled() {
    unlogChange("installed");
    getJSONObject().remove("installed");
    cacheRemoveValue(CacheKey.installed);
  }

  /** Clears the 'paidAppHasTrial' field, the 'has' method for this field will now return false */
  public void clearPaidAppHasTrial() {
    unlogChange("paidAppHasTrial");
    getJSONObject().remove("paidAppHasTrial");
    cacheRemoveValue(CacheKey.paidAppHasTrial);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public App copyChanges() {
    App copy = new App();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(App src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new App(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = jsonString != null ? jsonString : getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "App{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<App> CREATOR = new android.os.Parcelable.Creator<App>() {
    @Override
    public App createFromParcel(android.os.Parcel in) {
      App instance = new App(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle();
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public App[] newArray(int size) {
      return new App[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<App> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<App>() {
    @Override
    public App create(org.json.JSONObject jsonObject) {
      return new App(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean NAME_IS_REQUIRED = true;
    public static final long NAME_MAX_LEN = 127;

    public static final boolean PUBLISHED_IS_REQUIRED = false;

    public static final boolean DEVELOPER_IS_REQUIRED = false;

    public static final boolean DESCRIPTION_IS_REQUIRED = false;
    public static final long DESCRIPTION_MAX_LEN = 2000;

    public static final boolean ACTIVATIONURL_IS_REQUIRED = false;
    public static final long ACTIVATIONURL_MAX_LEN = 255;

    public static final boolean APPDOMAIN_IS_REQUIRED = false;
    public static final long APPDOMAIN_MAX_LEN = 255;

    public static final boolean ANDROIDVERSION_IS_REQUIRED = false;

    public static final boolean PACKAGENAME_IS_REQUIRED = false;
    public static final long PACKAGENAME_MAX_LEN = 255;

    public static final boolean APPROVED_IS_REQUIRED = false;

    public static final boolean SYSTEMAPP_IS_REQUIRED = false;

    public static final boolean FILENAMEICON_IS_REQUIRED = false;
    public static final long FILENAMEICON_MAX_LEN = 100;

    public static final boolean FILENAMEICONSMALL_IS_REQUIRED = false;
    public static final long FILENAMEICONSMALL_MAX_LEN = 255;

    public static final boolean FILENAMEICONLARGE_IS_REQUIRED = false;
    public static final long FILENAMEICONLARGE_MAX_LEN = 255;

    public static final boolean INSTALLCOUNT_IS_REQUIRED = false;

    public static final boolean PERMISSIONMERCHANTREAD_IS_REQUIRED = false;

    public static final boolean PERMISSIONMERCHANTWRITE_IS_REQUIRED = false;

    public static final boolean PERMISSIONCUSTOMERSREAD_IS_REQUIRED = false;

    public static final boolean PERMISSIONCUSTOMERSWRITE_IS_REQUIRED = false;

    public static final boolean PERMISSIONINVENTORYREAD_IS_REQUIRED = false;

    public static final boolean PERMISSIONINVENTORYWRITE_IS_REQUIRED = false;

    public static final boolean PERMISSIONORDERSREAD_IS_REQUIRED = false;

    public static final boolean PERMISSIONORDERSWRITE_IS_REQUIRED = false;

    public static final boolean PERMISSIONPAYMENTSREAD_IS_REQUIRED = false;

    public static final boolean PERMISSIONPAYMENTSWRITE_IS_REQUIRED = false;

    public static final boolean PERMISSIONEMPLOYEESREAD_IS_REQUIRED = false;

    public static final boolean PERMISSIONEMPLOYEESWRITE_IS_REQUIRED = false;

    public static final boolean PRIVACYPOLICY_IS_REQUIRED = false;
    public static final long PRIVACYPOLICY_MAX_LEN = 255;

    public static final boolean EULA_IS_REQUIRED = false;
    public static final long EULA_MAX_LEN = 255;

    public static final boolean SUPPORTPHONE_IS_REQUIRED = false;
    public static final long SUPPORTPHONE_MAX_LEN = 25;

    public static final boolean SUPPORTEMAIL_IS_REQUIRED = false;
    public static final long SUPPORTEMAIL_MAX_LEN = 127;

    public static final boolean SUPPORTURL_IS_REQUIRED = false;
    public static final long SUPPORTURL_MAX_LEN = 255;

    public static final boolean PRODUCTTYPE_IS_REQUIRED = false;

    public static final boolean ANDROIDPERMISSIONS_IS_REQUIRED = false;

    public static final boolean SCREENSHOTS_IS_REQUIRED = false;

    public static final boolean AVAILABLESUBSCRIPTIONS_IS_REQUIRED = false;

    public static final boolean AVAILABLEMETEREDS_IS_REQUIRED = false;

    public static final boolean ISMERCHANTINTRIAL_IS_REQUIRED = false;

    public static final boolean CURRENTSUBSCRIPTION_IS_REQUIRED = false;

    public static final boolean INSTALLED_IS_REQUIRED = false;

    public static final boolean PAIDAPPHASTRIAL_IS_REQUIRED = false;

  }

}
