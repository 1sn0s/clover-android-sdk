/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.cardRanges;

import com.clover.sdk.GenericClient;

@SuppressWarnings("all")
public final class CardRange implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Unique identifier
   */
  public java.lang.String getId() {
    return genClient.cacheGet(CacheKey.id);
  }

  /**
   * Date changed by issuer
   */
  public java.lang.Long getIssuerUpdateDay() {
    return genClient.cacheGet(CacheKey.issuer_update_day);
  }

  /**
   * Minumum value for range
   */
  public java.lang.Long getRangeStart() {
    return genClient.cacheGet(CacheKey.range_start);
  }

  /**
   * Maximum value for range
   */
  public java.lang.Long getRangeEnd() {
    return genClient.cacheGet(CacheKey.range_end);
  }

  public com.clover.sdk.v3.cardRanges.productType getProduct() {
    return genClient.cacheGet(CacheKey.product);
  }

  public java.lang.String getDetailCardIndicator() {
    return genClient.cacheGet(CacheKey.detail_card_indicator);
  }

  public java.lang.Long getBinLengthr() {
    return genClient.cacheGet(CacheKey.bin_lengthr);
  }

  public java.lang.String getEbtState() {
    return genClient.cacheGet(CacheKey.ebt_state);
  }

  public java.lang.Boolean getFsaVal() {
    return genClient.cacheGet(CacheKey.fsa_val);
  }

  public java.lang.Boolean getNormalizedIndicator() {
    return genClient.cacheGet(CacheKey.normalized_indicator);
  }

  public java.lang.Boolean getDeletedIndicator() {
    return genClient.cacheGet(CacheKey.deleted_indicator);
  }

  /**
   * Creation timestamp
   */
  public java.lang.Long getCreatedTime() {
    return genClient.cacheGet(CacheKey.created_time);
  }

  public java.lang.Long getDeletedTime() {
    return genClient.cacheGet(CacheKey.deleted_time);
  }


  public static final String AUTHORITY = "com.clover.cardRanges";

  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<CardRange> {
    id {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("id", java.lang.String.class);
      }
    },
    issuer_update_day {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("issuer_update_day", java.lang.Long.class);
      }
    },
    range_start {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("range_start", java.lang.Long.class);
      }
    },
    range_end {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("range_end", java.lang.Long.class);
      }
    },
    product {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractEnum("product", com.clover.sdk.v3.cardRanges.productType.class);
      }
    },
    detail_card_indicator {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("detail_card_indicator", java.lang.String.class);
      }
    },
    bin_lengthr {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("bin_lengthr", java.lang.Long.class);
      }
    },
    ebt_state {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("ebt_state", java.lang.String.class);
      }
    },
    fsa_val {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("fsa_val", java.lang.Boolean.class);
      }
    },
    normalized_indicator {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("normalized_indicator", java.lang.Boolean.class);
      }
    },
    deleted_indicator {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("deleted_indicator", java.lang.Boolean.class);
      }
    },
    created_time {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("created_time", java.lang.Long.class);
      }
    },
    deleted_time {
      @Override
      public Object extractValue(CardRange instance) {
        return instance.genClient.extractOther("deleted_time", java.lang.Long.class);
      }
    },
    ;
  }

  private GenericClient<CardRange> genClient = new GenericClient<CardRange>(this);

  /**
   * Constructs a new empty instance.
   */
  public CardRange() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public CardRange(String json) throws IllegalArgumentException {
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public CardRange(org.json.JSONObject jsonObject) {
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public CardRange(CardRange src) {
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }


  @Override
  public void validate() {
    genClient.validateLength(getId(), 13);

    genClient.validateLength(getDetailCardIndicator(), 10);

    genClient.validateLength(getEbtState(), 2);
  }

  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return genClient.cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'issuer_update_day' field is set and is not null */
  public boolean isNotNullIssuerUpdateDay() {
    return genClient.cacheValueIsNotNull(CacheKey.issuer_update_day);
  }

  /** Checks whether the 'range_start' field is set and is not null */
  public boolean isNotNullRangeStart() {
    return genClient.cacheValueIsNotNull(CacheKey.range_start);
  }

  /** Checks whether the 'range_end' field is set and is not null */
  public boolean isNotNullRangeEnd() {
    return genClient.cacheValueIsNotNull(CacheKey.range_end);
  }

  /** Checks whether the 'product' field is set and is not null */
  public boolean isNotNullProduct() {
    return genClient.cacheValueIsNotNull(CacheKey.product);
  }

  /** Checks whether the 'detail_card_indicator' field is set and is not null */
  public boolean isNotNullDetailCardIndicator() {
    return genClient.cacheValueIsNotNull(CacheKey.detail_card_indicator);
  }

  /** Checks whether the 'bin_lengthr' field is set and is not null */
  public boolean isNotNullBinLengthr() {
    return genClient.cacheValueIsNotNull(CacheKey.bin_lengthr);
  }

  /** Checks whether the 'ebt_state' field is set and is not null */
  public boolean isNotNullEbtState() {
    return genClient.cacheValueIsNotNull(CacheKey.ebt_state);
  }

  /** Checks whether the 'fsa_val' field is set and is not null */
  public boolean isNotNullFsaVal() {
    return genClient.cacheValueIsNotNull(CacheKey.fsa_val);
  }

  /** Checks whether the 'normalized_indicator' field is set and is not null */
  public boolean isNotNullNormalizedIndicator() {
    return genClient.cacheValueIsNotNull(CacheKey.normalized_indicator);
  }

  /** Checks whether the 'deleted_indicator' field is set and is not null */
  public boolean isNotNullDeletedIndicator() {
    return genClient.cacheValueIsNotNull(CacheKey.deleted_indicator);
  }

  /** Checks whether the 'created_time' field is set and is not null */
  public boolean isNotNullCreatedTime() {
    return genClient.cacheValueIsNotNull(CacheKey.created_time);
  }

  /** Checks whether the 'deleted_time' field is set and is not null */
  public boolean isNotNullDeletedTime() {
    return genClient.cacheValueIsNotNull(CacheKey.deleted_time);
  }


  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return genClient.cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'issuer_update_day' field has been set, however the value could be null */
  public boolean hasIssuerUpdateDay() {
    return genClient.cacheHasKey(CacheKey.issuer_update_day);
  }

  /** Checks whether the 'range_start' field has been set, however the value could be null */
  public boolean hasRangeStart() {
    return genClient.cacheHasKey(CacheKey.range_start);
  }

  /** Checks whether the 'range_end' field has been set, however the value could be null */
  public boolean hasRangeEnd() {
    return genClient.cacheHasKey(CacheKey.range_end);
  }

  /** Checks whether the 'product' field has been set, however the value could be null */
  public boolean hasProduct() {
    return genClient.cacheHasKey(CacheKey.product);
  }

  /** Checks whether the 'detail_card_indicator' field has been set, however the value could be null */
  public boolean hasDetailCardIndicator() {
    return genClient.cacheHasKey(CacheKey.detail_card_indicator);
  }

  /** Checks whether the 'bin_lengthr' field has been set, however the value could be null */
  public boolean hasBinLengthr() {
    return genClient.cacheHasKey(CacheKey.bin_lengthr);
  }

  /** Checks whether the 'ebt_state' field has been set, however the value could be null */
  public boolean hasEbtState() {
    return genClient.cacheHasKey(CacheKey.ebt_state);
  }

  /** Checks whether the 'fsa_val' field has been set, however the value could be null */
  public boolean hasFsaVal() {
    return genClient.cacheHasKey(CacheKey.fsa_val);
  }

  /** Checks whether the 'normalized_indicator' field has been set, however the value could be null */
  public boolean hasNormalizedIndicator() {
    return genClient.cacheHasKey(CacheKey.normalized_indicator);
  }

  /** Checks whether the 'deleted_indicator' field has been set, however the value could be null */
  public boolean hasDeletedIndicator() {
    return genClient.cacheHasKey(CacheKey.deleted_indicator);
  }

  /** Checks whether the 'created_time' field has been set, however the value could be null */
  public boolean hasCreatedTime() {
    return genClient.cacheHasKey(CacheKey.created_time);
  }

  /** Checks whether the 'deleted_time' field has been set, however the value could be null */
  public boolean hasDeletedTime() {
    return genClient.cacheHasKey(CacheKey.deleted_time);
  }


  /**
   * Sets the field 'id'.
   */
  public CardRange setId(java.lang.String id) {
    return genClient.setOther(id, CacheKey.id);
  }

  /**
   * Sets the field 'issuer_update_day'.
   */
  public CardRange setIssuerUpdateDay(java.lang.Long issuer_update_day) {
    return genClient.setOther(issuer_update_day, CacheKey.issuer_update_day);
  }

  /**
   * Sets the field 'range_start'.
   */
  public CardRange setRangeStart(java.lang.Long range_start) {
    return genClient.setOther(range_start, CacheKey.range_start);
  }

  /**
   * Sets the field 'range_end'.
   */
  public CardRange setRangeEnd(java.lang.Long range_end) {
    return genClient.setOther(range_end, CacheKey.range_end);
  }

  /**
   * Sets the field 'product'.
   */
  public CardRange setProduct(com.clover.sdk.v3.cardRanges.productType product) {
    return genClient.setOther(product, CacheKey.product);
  }

  /**
   * Sets the field 'detail_card_indicator'.
   */
  public CardRange setDetailCardIndicator(java.lang.String detail_card_indicator) {
    return genClient.setOther(detail_card_indicator, CacheKey.detail_card_indicator);
  }

  /**
   * Sets the field 'bin_lengthr'.
   */
  public CardRange setBinLengthr(java.lang.Long bin_lengthr) {
    return genClient.setOther(bin_lengthr, CacheKey.bin_lengthr);
  }

  /**
   * Sets the field 'ebt_state'.
   */
  public CardRange setEbtState(java.lang.String ebt_state) {
    return genClient.setOther(ebt_state, CacheKey.ebt_state);
  }

  /**
   * Sets the field 'fsa_val'.
   */
  public CardRange setFsaVal(java.lang.Boolean fsa_val) {
    return genClient.setOther(fsa_val, CacheKey.fsa_val);
  }

  /**
   * Sets the field 'normalized_indicator'.
   */
  public CardRange setNormalizedIndicator(java.lang.Boolean normalized_indicator) {
    return genClient.setOther(normalized_indicator, CacheKey.normalized_indicator);
  }

  /**
   * Sets the field 'deleted_indicator'.
   */
  public CardRange setDeletedIndicator(java.lang.Boolean deleted_indicator) {
    return genClient.setOther(deleted_indicator, CacheKey.deleted_indicator);
  }

  /**
   * Sets the field 'created_time'.
   */
  public CardRange setCreatedTime(java.lang.Long created_time) {
    return genClient.setOther(created_time, CacheKey.created_time);
  }

  /**
   * Sets the field 'deleted_time'.
   */
  public CardRange setDeletedTime(java.lang.Long deleted_time) {
    return genClient.setOther(deleted_time, CacheKey.deleted_time);
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    genClient.clear(CacheKey.id);
  }
  /** Clears the 'issuer_update_day' field, the 'has' method for this field will now return false */
  public void clearIssuerUpdateDay() {
    genClient.clear(CacheKey.issuer_update_day);
  }
  /** Clears the 'range_start' field, the 'has' method for this field will now return false */
  public void clearRangeStart() {
    genClient.clear(CacheKey.range_start);
  }
  /** Clears the 'range_end' field, the 'has' method for this field will now return false */
  public void clearRangeEnd() {
    genClient.clear(CacheKey.range_end);
  }
  /** Clears the 'product' field, the 'has' method for this field will now return false */
  public void clearProduct() {
    genClient.clear(CacheKey.product);
  }
  /** Clears the 'detail_card_indicator' field, the 'has' method for this field will now return false */
  public void clearDetailCardIndicator() {
    genClient.clear(CacheKey.detail_card_indicator);
  }
  /** Clears the 'bin_lengthr' field, the 'has' method for this field will now return false */
  public void clearBinLengthr() {
    genClient.clear(CacheKey.bin_lengthr);
  }
  /** Clears the 'ebt_state' field, the 'has' method for this field will now return false */
  public void clearEbtState() {
    genClient.clear(CacheKey.ebt_state);
  }
  /** Clears the 'fsa_val' field, the 'has' method for this field will now return false */
  public void clearFsaVal() {
    genClient.clear(CacheKey.fsa_val);
  }
  /** Clears the 'normalized_indicator' field, the 'has' method for this field will now return false */
  public void clearNormalizedIndicator() {
    genClient.clear(CacheKey.normalized_indicator);
  }
  /** Clears the 'deleted_indicator' field, the 'has' method for this field will now return false */
  public void clearDeletedIndicator() {
    genClient.clear(CacheKey.deleted_indicator);
  }
  /** Clears the 'created_time' field, the 'has' method for this field will now return false */
  public void clearCreatedTime() {
    genClient.clear(CacheKey.created_time);
  }
  /** Clears the 'deleted_time' field, the 'has' method for this field will now return false */
  public void clearDeletedTime() {
    genClient.clear(CacheKey.deleted_time);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public CardRange copyChanges() {
    CardRange copy = new CardRange();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(CardRange src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new CardRange(src).getJSONObject(), src.genClient);
    }
  }

  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    return genClient.getBundle();
  }

  @Override
  public String toString() {
    return genClient.toString();
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
    genClient.writeToParcel(dest, flags);
  }

  public static final android.os.Parcelable.Creator<CardRange> CREATOR = new android.os.Parcelable.Creator<CardRange>() {
    @Override
    public CardRange createFromParcel(android.os.Parcel in) {
      CardRange instance = new CardRange(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public CardRange[] newArray(int size) {
      return new CardRange[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<CardRange> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<CardRange>() {
    @Override
    public CardRange create(org.json.JSONObject jsonObject) {
      return new CardRange(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean ISSUER_UPDATE_DAY_IS_REQUIRED = false;

    public static final boolean RANGE_START_IS_REQUIRED = false;

    public static final boolean RANGE_END_IS_REQUIRED = false;

    public static final boolean PRODUCT_IS_REQUIRED = false;

    public static final boolean DETAIL_CARD_INDICATOR_IS_REQUIRED = false;
    public static final long DETAIL_CARD_INDICATOR_MAX_LEN = 10;

    public static final boolean BIN_LENGTHR_IS_REQUIRED = false;

    public static final boolean EBT_STATE_IS_REQUIRED = false;
    public static final long EBT_STATE_MAX_LEN = 2;

    public static final boolean FSA_VAL_IS_REQUIRED = false;

    public static final boolean NORMALIZED_INDICATOR_IS_REQUIRED = false;

    public static final boolean DELETED_INDICATOR_IS_REQUIRED = false;

    public static final boolean CREATED_TIME_IS_REQUIRED = false;

    public static final boolean DELETED_TIME_IS_REQUIRED = false;

  }

}
