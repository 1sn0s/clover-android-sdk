/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


package com.clover.sdk.v3.pay;

@SuppressWarnings("all")
public final class TaxableAmountRate implements android.os.Parcelable, com.clover.sdk.v3.Validator {

  private String jsonString = null;
  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;

  /**
   * Constructs a new empty instance.
   */
  public TaxableAmountRate() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public TaxableAmountRate(String json) {
    this.jsonString = json;
  }

  /**
   * Construct a new instance backed by the given JSONObject, be careful the parameter is not copied.
   */
  public TaxableAmountRate(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance.
   */
  public TaxableAmountRate(TaxableAmountRate src) {
    org.json.JSONObject jsonObjectSrc = src.getJSONObject();

    try {
      // Makes a deep copy, but isn't the most performant
      this.jsonObject = new org.json.JSONObject(jsonObjectSrc.toString());
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }

    if (src.bundle != null) {
      bundle = new android.os.Bundle(src.bundle);
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, be careful the returned object is not a copy.
   */
  public org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = (org.json.JSONObject) new org.json.JSONTokener(jsonString).nextValue();
          jsonString = null; // null this so it will be recreated if jsonObject is modified
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String id = getId();
    if (id != null && id.length() > 13) throw new IllegalArgumentException("Maximum string length exceeded for 'id'");

    java.lang.String name = getName();
    if (name != null && name.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'name'");
  }


  public java.lang.String getId() {
    return getJSONObject().isNull("id") ? null :
      getJSONObject().optString("id", null);
  }

  public java.lang.String getName() {
    return getJSONObject().isNull("name") ? null :
      getJSONObject().optString("name", null);
  }

  public java.lang.Long getTaxableAmount() {
    return getJSONObject().isNull("taxableAmount") ? null :
      getJSONObject().optLong("taxableAmount");
  }

  public java.lang.Long getRate() {
    return getJSONObject().isNull("rate") ? null :
      getJSONObject().optLong("rate");
  }


  /** Checks whether the 'id' field has been set */
  public boolean hasId() {
    return getJSONObject().has("id");
  }

  /** Checks whether the 'name' field has been set */
  public boolean hasName() {
    return getJSONObject().has("name");
  }

  /** Checks whether the 'taxableAmount' field has been set */
  public boolean hasTaxableAmount() {
    return getJSONObject().has("taxableAmount");
  }

  /** Checks whether the 'rate' field has been set */
  public boolean hasRate() {
    return getJSONObject().has("rate");
  }


  public TaxableAmountRate setId(java.lang.String id) {
    try {
      getJSONObject().put("id", id);
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }

  public TaxableAmountRate setName(java.lang.String name) {
    try {
      getJSONObject().put("name", name);
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }

  public TaxableAmountRate setTaxableAmount(java.lang.Long taxableAmount) {
    try {
      getJSONObject().put("taxableAmount", taxableAmount);
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }

  public TaxableAmountRate setRate(java.lang.Long rate) {
    try {
      getJSONObject().put("rate", rate);
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }


  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
    String json = jsonString != null ? jsonString : getJSONObject().toString();
    dest.writeString(json);
    dest.writeBundle(bundle);
  }

  public static final android.os.Parcelable.Creator<TaxableAmountRate> CREATOR = new android.os.Parcelable.Creator<TaxableAmountRate>() {
    @Override
    public TaxableAmountRate createFromParcel(android.os.Parcel in) {
      String json = in.readString();
      TaxableAmountRate instance = new TaxableAmountRate(json);
      instance.bundle = in.readBundle();
      return instance;
    }

    @Override
    public TaxableAmountRate[] newArray(int size) {
      return new TaxableAmountRate[size];
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean NAME_IS_REQUIRED = false;
    public static final long NAME_MAX_LEN = 127;

    public static final boolean TAXABLEAMOUNT_IS_REQUIRED = false;

    public static final boolean RATE_IS_REQUIRED = false;

  }

}
