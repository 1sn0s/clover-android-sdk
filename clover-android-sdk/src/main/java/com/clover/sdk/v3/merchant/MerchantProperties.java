/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.merchant;

@SuppressWarnings("all")
public final class MerchantProperties implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {


  private enum CacheKey {
    defaultCurrency {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractDefaultCurrency();
      }
    },
    tipsEnabled {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractTipsEnabled();
      }
    },
    receiptProperties {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractReceiptProperties();
      }
    },
    summaryHour {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractSummaryHour();
      }
    },
    signatureThreshold {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractSignatureThreshold();
      }
    },
    tipRateDefault {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractTipRateDefault();
      }
    },
    onPaperTipSignatures {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractOnPaperTipSignatures();
      }
    },
    autoLogout {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractAutoLogout();
      }
    },
    orderTitle {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractOrderTitle();
      }
    },
    notesOnOrders {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractNotesOnOrders();
      }
    },
    deleteOrders {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractDeleteOrders();
      }
    },
    removeTaxEnabled {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractRemoveTaxEnabled();
      }
    },
    groupLineItems {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractGroupLineItems();
      }
    },
    alternateInventoryNames {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractAlternateInventoryNames();
      }
    },
    autoPrint {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractAutoPrint();
      }
    },
    hardwareProfile {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractHardwareProfile();
      }
    },
    shippingAddress {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractShippingAddress();
      }
    },
    marketingEnabled {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractMarketingEnabled();
      }
    },
    marketingPreferenceText {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractMarketingPreferenceText();
      }
    },
    bankMarker {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractBankMarker();
      }
    },
    supportPhone {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractSupportPhone();
      }
    },
    supportEmail {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractSupportEmail();
      }
    },
    manualCloseout {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractManualCloseout();
      }
    },
    stayInCategory {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractStayInCategory();
      }
    },
    locale {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractLocale();
      }
    },
    vat {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractVat();
      }
    },
    vatTaxName {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractVatTaxName();
      }
    },
    appBillingEnabled {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractAppBillingEnabled();
      }
    },
    updateStock {
      @Override
      public Object extractValue(MerchantProperties instance) {
        return instance.extractUpdateStock();
      }
    },
    ;

    public abstract Object extractValue(MerchantProperties instance);
  }

  private String jsonString = null;
  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public MerchantProperties() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public MerchantProperties(String json) {
    this.jsonString = json;
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public MerchantProperties(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public MerchantProperties(MerchantProperties src) {
    if (src.jsonString != null) {
      this.jsonString = src.jsonString;
    } else {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = new org.json.JSONObject(jsonString);
          jsonString = null; // null this so it will be recreated if jsonObject is modified
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String defaultCurrency = getDefaultCurrency();
    if (defaultCurrency != null && defaultCurrency.length() > 3) throw new IllegalArgumentException("Maximum string length exceeded for 'defaultCurrency'");

    java.lang.String hardwareProfile = getHardwareProfile();
    if (hardwareProfile != null && hardwareProfile.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'hardwareProfile'");

    java.lang.String marketingPreferenceText = getMarketingPreferenceText();
    if (marketingPreferenceText != null && marketingPreferenceText.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'marketingPreferenceText'");

    java.lang.String supportPhone = getSupportPhone();
    if (supportPhone != null && supportPhone.length() > 25) throw new IllegalArgumentException("Maximum string length exceeded for 'supportPhone'");

    java.lang.String supportEmail = getSupportEmail();
    if (supportEmail != null && supportEmail.length() > 127) throw new IllegalArgumentException("Maximum string length exceeded for 'supportEmail'");

    java.lang.String vatTaxName = getVatTaxName();
    if (vatTaxName != null && vatTaxName.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'vatTaxName'");
  }


  /**
   */
  public java.lang.String getDefaultCurrency() {
    return cacheGet(CacheKey.defaultCurrency);
  }

  private java.lang.String extractDefaultCurrency() {
    return getJSONObject().isNull("defaultCurrency") ? null :
      getJSONObject().optString("defaultCurrency");
  }

  /**
   */
  public java.lang.Boolean getTipsEnabled() {
    return cacheGet(CacheKey.tipsEnabled);
  }

  private java.lang.Boolean extractTipsEnabled() {
    return getJSONObject().isNull("tipsEnabled") ? null :
      getJSONObject().optBoolean("tipsEnabled");
  }

  /**
   */
  public java.lang.String getReceiptProperties() {
    return cacheGet(CacheKey.receiptProperties);
  }

  private java.lang.String extractReceiptProperties() {
    return getJSONObject().isNull("receiptProperties") ? null :
      getJSONObject().optString("receiptProperties");
  }

  /**
   */
  public java.lang.Integer getSummaryHour() {
    return cacheGet(CacheKey.summaryHour);
  }

  private java.lang.Integer extractSummaryHour() {
    return getJSONObject().isNull("summaryHour") ? null :
      getJSONObject().optInt("summaryHour");
  }

  /**
   */
  public java.lang.Long getSignatureThreshold() {
    return cacheGet(CacheKey.signatureThreshold);
  }

  private java.lang.Long extractSignatureThreshold() {
    return getJSONObject().isNull("signatureThreshold") ? null :
      getJSONObject().optLong("signatureThreshold");
  }

  /**
   */
  public java.lang.Integer getTipRateDefault() {
    return cacheGet(CacheKey.tipRateDefault);
  }

  private java.lang.Integer extractTipRateDefault() {
    return getJSONObject().isNull("tipRateDefault") ? null :
      getJSONObject().optInt("tipRateDefault");
  }

  /**
   */
  public java.lang.Boolean getOnPaperTipSignatures() {
    return cacheGet(CacheKey.onPaperTipSignatures);
  }

  private java.lang.Boolean extractOnPaperTipSignatures() {
    return getJSONObject().isNull("onPaperTipSignatures") ? null :
      getJSONObject().optBoolean("onPaperTipSignatures");
  }

  /**
   */
  public java.lang.Boolean getAutoLogout() {
    return cacheGet(CacheKey.autoLogout);
  }

  private java.lang.Boolean extractAutoLogout() {
    return getJSONObject().isNull("autoLogout") ? null :
      getJSONObject().optBoolean("autoLogout");
  }

  /**
   */
  public com.clover.sdk.v3.merchant.OrderTitle getOrderTitle() {
    return cacheGet(CacheKey.orderTitle);
  }

  private com.clover.sdk.v3.merchant.OrderTitle extractOrderTitle() {
    if (!getJSONObject().isNull("orderTitle")) {
      try {
        return com.clover.sdk.v3.merchant.OrderTitle.valueOf(getJSONObject().optString("orderTitle"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }

  /**
   */
  public java.lang.Boolean getNotesOnOrders() {
    return cacheGet(CacheKey.notesOnOrders);
  }

  private java.lang.Boolean extractNotesOnOrders() {
    return getJSONObject().isNull("notesOnOrders") ? null :
      getJSONObject().optBoolean("notesOnOrders");
  }

  /**
   */
  public java.lang.Boolean getDeleteOrders() {
    return cacheGet(CacheKey.deleteOrders);
  }

  private java.lang.Boolean extractDeleteOrders() {
    return getJSONObject().isNull("deleteOrders") ? null :
      getJSONObject().optBoolean("deleteOrders");
  }

  /**
   */
  public java.lang.Boolean getRemoveTaxEnabled() {
    return cacheGet(CacheKey.removeTaxEnabled);
  }

  private java.lang.Boolean extractRemoveTaxEnabled() {
    return getJSONObject().isNull("removeTaxEnabled") ? null :
      getJSONObject().optBoolean("removeTaxEnabled");
  }

  /**
   */
  public java.lang.Boolean getGroupLineItems() {
    return cacheGet(CacheKey.groupLineItems);
  }

  private java.lang.Boolean extractGroupLineItems() {
    return getJSONObject().isNull("groupLineItems") ? null :
      getJSONObject().optBoolean("groupLineItems");
  }

  /**
   */
  public java.lang.Boolean getAlternateInventoryNames() {
    return cacheGet(CacheKey.alternateInventoryNames);
  }

  private java.lang.Boolean extractAlternateInventoryNames() {
    return getJSONObject().isNull("alternateInventoryNames") ? null :
      getJSONObject().optBoolean("alternateInventoryNames");
  }

  /**
   */
  public java.lang.Boolean getAutoPrint() {
    return cacheGet(CacheKey.autoPrint);
  }

  private java.lang.Boolean extractAutoPrint() {
    return getJSONObject().isNull("autoPrint") ? null :
      getJSONObject().optBoolean("autoPrint");
  }

  /**
   */
  public java.lang.String getHardwareProfile() {
    return cacheGet(CacheKey.hardwareProfile);
  }

  private java.lang.String extractHardwareProfile() {
    return getJSONObject().isNull("hardwareProfile") ? null :
      getJSONObject().optString("hardwareProfile");
  }

  /**
   */
  public java.lang.String getShippingAddress() {
    return cacheGet(CacheKey.shippingAddress);
  }

  private java.lang.String extractShippingAddress() {
    return getJSONObject().isNull("shippingAddress") ? null :
      getJSONObject().optString("shippingAddress");
  }

  /**
   */
  public java.lang.Boolean getMarketingEnabled() {
    return cacheGet(CacheKey.marketingEnabled);
  }

  private java.lang.Boolean extractMarketingEnabled() {
    return getJSONObject().isNull("marketingEnabled") ? null :
      getJSONObject().optBoolean("marketingEnabled");
  }

  /**
   */
  public java.lang.String getMarketingPreferenceText() {
    return cacheGet(CacheKey.marketingPreferenceText);
  }

  private java.lang.String extractMarketingPreferenceText() {
    return getJSONObject().isNull("marketingPreferenceText") ? null :
      getJSONObject().optString("marketingPreferenceText");
  }

  /**
   */
  public java.lang.Integer getBankMarker() {
    return cacheGet(CacheKey.bankMarker);
  }

  private java.lang.Integer extractBankMarker() {
    return getJSONObject().isNull("bankMarker") ? null :
      getJSONObject().optInt("bankMarker");
  }

  /**
   */
  public java.lang.String getSupportPhone() {
    return cacheGet(CacheKey.supportPhone);
  }

  private java.lang.String extractSupportPhone() {
    return getJSONObject().isNull("supportPhone") ? null :
      getJSONObject().optString("supportPhone");
  }

  /**
   */
  public java.lang.String getSupportEmail() {
    return cacheGet(CacheKey.supportEmail);
  }

  private java.lang.String extractSupportEmail() {
    return getJSONObject().isNull("supportEmail") ? null :
      getJSONObject().optString("supportEmail");
  }

  /**
   */
  public java.lang.Boolean getManualCloseout() {
    return cacheGet(CacheKey.manualCloseout);
  }

  private java.lang.Boolean extractManualCloseout() {
    return getJSONObject().isNull("manualCloseout") ? null :
      getJSONObject().optBoolean("manualCloseout");
  }

  /**
   */
  public java.lang.Boolean getStayInCategory() {
    return cacheGet(CacheKey.stayInCategory);
  }

  private java.lang.Boolean extractStayInCategory() {
    return getJSONObject().isNull("stayInCategory") ? null :
      getJSONObject().optBoolean("stayInCategory");
  }

  /**
   * The locale of the merchant.
   */
  public java.lang.String getLocale() {
    return cacheGet(CacheKey.locale);
  }

  private java.lang.String extractLocale() {
    return getJSONObject().isNull("locale") ? null :
      getJSONObject().optString("locale");
  }

  /**
   * Whether this merchant is in a VAT country
   */
  public java.lang.Boolean getVat() {
    return cacheGet(CacheKey.vat);
  }

  private java.lang.Boolean extractVat() {
    return getJSONObject().isNull("vat") ? null :
      getJSONObject().optBoolean("vat");
  }

  /**
   * The VAT tax name that is shown on receipts
   */
  public java.lang.String getVatTaxName() {
    return cacheGet(CacheKey.vatTaxName);
  }

  private java.lang.String extractVatTaxName() {
    return getJSONObject().isNull("vatTaxName") ? null :
      getJSONObject().optString("vatTaxName");
  }

  /**
   */
  public java.lang.Boolean getAppBillingEnabled() {
    return cacheGet(CacheKey.appBillingEnabled);
  }

  private java.lang.Boolean extractAppBillingEnabled() {
    return getJSONObject().isNull("appBillingEnabled") ? null :
      getJSONObject().optBoolean("appBillingEnabled");
  }

  /**
   */
  public java.lang.Boolean getUpdateStock() {
    return cacheGet(CacheKey.updateStock);
  }

  private java.lang.Boolean extractUpdateStock() {
    return getJSONObject().isNull("updateStock") ? null :
      getJSONObject().optBoolean("updateStock");
  }


  /** Checks whether the 'defaultCurrency' field is set and is not null */
  public boolean isNotNullDefaultCurrency() {
    return cacheValueIsNotNull(CacheKey.defaultCurrency);
  }

  /** Checks whether the 'tipsEnabled' field is set and is not null */
  public boolean isNotNullTipsEnabled() {
    return cacheValueIsNotNull(CacheKey.tipsEnabled);
  }

  /** Checks whether the 'receiptProperties' field is set and is not null */
  public boolean isNotNullReceiptProperties() {
    return cacheValueIsNotNull(CacheKey.receiptProperties);
  }

  /** Checks whether the 'summaryHour' field is set and is not null */
  public boolean isNotNullSummaryHour() {
    return cacheValueIsNotNull(CacheKey.summaryHour);
  }

  /** Checks whether the 'signatureThreshold' field is set and is not null */
  public boolean isNotNullSignatureThreshold() {
    return cacheValueIsNotNull(CacheKey.signatureThreshold);
  }

  /** Checks whether the 'tipRateDefault' field is set and is not null */
  public boolean isNotNullTipRateDefault() {
    return cacheValueIsNotNull(CacheKey.tipRateDefault);
  }

  /** Checks whether the 'onPaperTipSignatures' field is set and is not null */
  public boolean isNotNullOnPaperTipSignatures() {
    return cacheValueIsNotNull(CacheKey.onPaperTipSignatures);
  }

  /** Checks whether the 'autoLogout' field is set and is not null */
  public boolean isNotNullAutoLogout() {
    return cacheValueIsNotNull(CacheKey.autoLogout);
  }

  /** Checks whether the 'orderTitle' field is set and is not null */
  public boolean isNotNullOrderTitle() {
    return cacheValueIsNotNull(CacheKey.orderTitle);
  }

  /** Checks whether the 'notesOnOrders' field is set and is not null */
  public boolean isNotNullNotesOnOrders() {
    return cacheValueIsNotNull(CacheKey.notesOnOrders);
  }

  /** Checks whether the 'deleteOrders' field is set and is not null */
  public boolean isNotNullDeleteOrders() {
    return cacheValueIsNotNull(CacheKey.deleteOrders);
  }

  /** Checks whether the 'removeTaxEnabled' field is set and is not null */
  public boolean isNotNullRemoveTaxEnabled() {
    return cacheValueIsNotNull(CacheKey.removeTaxEnabled);
  }

  /** Checks whether the 'groupLineItems' field is set and is not null */
  public boolean isNotNullGroupLineItems() {
    return cacheValueIsNotNull(CacheKey.groupLineItems);
  }

  /** Checks whether the 'alternateInventoryNames' field is set and is not null */
  public boolean isNotNullAlternateInventoryNames() {
    return cacheValueIsNotNull(CacheKey.alternateInventoryNames);
  }

  /** Checks whether the 'autoPrint' field is set and is not null */
  public boolean isNotNullAutoPrint() {
    return cacheValueIsNotNull(CacheKey.autoPrint);
  }

  /** Checks whether the 'hardwareProfile' field is set and is not null */
  public boolean isNotNullHardwareProfile() {
    return cacheValueIsNotNull(CacheKey.hardwareProfile);
  }

  /** Checks whether the 'shippingAddress' field is set and is not null */
  public boolean isNotNullShippingAddress() {
    return cacheValueIsNotNull(CacheKey.shippingAddress);
  }

  /** Checks whether the 'marketingEnabled' field is set and is not null */
  public boolean isNotNullMarketingEnabled() {
    return cacheValueIsNotNull(CacheKey.marketingEnabled);
  }

  /** Checks whether the 'marketingPreferenceText' field is set and is not null */
  public boolean isNotNullMarketingPreferenceText() {
    return cacheValueIsNotNull(CacheKey.marketingPreferenceText);
  }

  /** Checks whether the 'bankMarker' field is set and is not null */
  public boolean isNotNullBankMarker() {
    return cacheValueIsNotNull(CacheKey.bankMarker);
  }

  /** Checks whether the 'supportPhone' field is set and is not null */
  public boolean isNotNullSupportPhone() {
    return cacheValueIsNotNull(CacheKey.supportPhone);
  }

  /** Checks whether the 'supportEmail' field is set and is not null */
  public boolean isNotNullSupportEmail() {
    return cacheValueIsNotNull(CacheKey.supportEmail);
  }

  /** Checks whether the 'manualCloseout' field is set and is not null */
  public boolean isNotNullManualCloseout() {
    return cacheValueIsNotNull(CacheKey.manualCloseout);
  }

  /** Checks whether the 'stayInCategory' field is set and is not null */
  public boolean isNotNullStayInCategory() {
    return cacheValueIsNotNull(CacheKey.stayInCategory);
  }

  /** Checks whether the 'locale' field is set and is not null */
  public boolean isNotNullLocale() {
    return cacheValueIsNotNull(CacheKey.locale);
  }

  /** Checks whether the 'vat' field is set and is not null */
  public boolean isNotNullVat() {
    return cacheValueIsNotNull(CacheKey.vat);
  }

  /** Checks whether the 'vatTaxName' field is set and is not null */
  public boolean isNotNullVatTaxName() {
    return cacheValueIsNotNull(CacheKey.vatTaxName);
  }

  /** Checks whether the 'appBillingEnabled' field is set and is not null */
  public boolean isNotNullAppBillingEnabled() {
    return cacheValueIsNotNull(CacheKey.appBillingEnabled);
  }

  /** Checks whether the 'updateStock' field is set and is not null */
  public boolean isNotNullUpdateStock() {
    return cacheValueIsNotNull(CacheKey.updateStock);
  }


  /** Checks whether the 'defaultCurrency' field has been set, however the value could be null */
  public boolean hasDefaultCurrency() {
    return cacheHasKey(CacheKey.defaultCurrency);
  }

  /** Checks whether the 'tipsEnabled' field has been set, however the value could be null */
  public boolean hasTipsEnabled() {
    return cacheHasKey(CacheKey.tipsEnabled);
  }

  /** Checks whether the 'receiptProperties' field has been set, however the value could be null */
  public boolean hasReceiptProperties() {
    return cacheHasKey(CacheKey.receiptProperties);
  }

  /** Checks whether the 'summaryHour' field has been set, however the value could be null */
  public boolean hasSummaryHour() {
    return cacheHasKey(CacheKey.summaryHour);
  }

  /** Checks whether the 'signatureThreshold' field has been set, however the value could be null */
  public boolean hasSignatureThreshold() {
    return cacheHasKey(CacheKey.signatureThreshold);
  }

  /** Checks whether the 'tipRateDefault' field has been set, however the value could be null */
  public boolean hasTipRateDefault() {
    return cacheHasKey(CacheKey.tipRateDefault);
  }

  /** Checks whether the 'onPaperTipSignatures' field has been set, however the value could be null */
  public boolean hasOnPaperTipSignatures() {
    return cacheHasKey(CacheKey.onPaperTipSignatures);
  }

  /** Checks whether the 'autoLogout' field has been set, however the value could be null */
  public boolean hasAutoLogout() {
    return cacheHasKey(CacheKey.autoLogout);
  }

  /** Checks whether the 'orderTitle' field has been set, however the value could be null */
  public boolean hasOrderTitle() {
    return cacheHasKey(CacheKey.orderTitle);
  }

  /** Checks whether the 'notesOnOrders' field has been set, however the value could be null */
  public boolean hasNotesOnOrders() {
    return cacheHasKey(CacheKey.notesOnOrders);
  }

  /** Checks whether the 'deleteOrders' field has been set, however the value could be null */
  public boolean hasDeleteOrders() {
    return cacheHasKey(CacheKey.deleteOrders);
  }

  /** Checks whether the 'removeTaxEnabled' field has been set, however the value could be null */
  public boolean hasRemoveTaxEnabled() {
    return cacheHasKey(CacheKey.removeTaxEnabled);
  }

  /** Checks whether the 'groupLineItems' field has been set, however the value could be null */
  public boolean hasGroupLineItems() {
    return cacheHasKey(CacheKey.groupLineItems);
  }

  /** Checks whether the 'alternateInventoryNames' field has been set, however the value could be null */
  public boolean hasAlternateInventoryNames() {
    return cacheHasKey(CacheKey.alternateInventoryNames);
  }

  /** Checks whether the 'autoPrint' field has been set, however the value could be null */
  public boolean hasAutoPrint() {
    return cacheHasKey(CacheKey.autoPrint);
  }

  /** Checks whether the 'hardwareProfile' field has been set, however the value could be null */
  public boolean hasHardwareProfile() {
    return cacheHasKey(CacheKey.hardwareProfile);
  }

  /** Checks whether the 'shippingAddress' field has been set, however the value could be null */
  public boolean hasShippingAddress() {
    return cacheHasKey(CacheKey.shippingAddress);
  }

  /** Checks whether the 'marketingEnabled' field has been set, however the value could be null */
  public boolean hasMarketingEnabled() {
    return cacheHasKey(CacheKey.marketingEnabled);
  }

  /** Checks whether the 'marketingPreferenceText' field has been set, however the value could be null */
  public boolean hasMarketingPreferenceText() {
    return cacheHasKey(CacheKey.marketingPreferenceText);
  }

  /** Checks whether the 'bankMarker' field has been set, however the value could be null */
  public boolean hasBankMarker() {
    return cacheHasKey(CacheKey.bankMarker);
  }

  /** Checks whether the 'supportPhone' field has been set, however the value could be null */
  public boolean hasSupportPhone() {
    return cacheHasKey(CacheKey.supportPhone);
  }

  /** Checks whether the 'supportEmail' field has been set, however the value could be null */
  public boolean hasSupportEmail() {
    return cacheHasKey(CacheKey.supportEmail);
  }

  /** Checks whether the 'manualCloseout' field has been set, however the value could be null */
  public boolean hasManualCloseout() {
    return cacheHasKey(CacheKey.manualCloseout);
  }

  /** Checks whether the 'stayInCategory' field has been set, however the value could be null */
  public boolean hasStayInCategory() {
    return cacheHasKey(CacheKey.stayInCategory);
  }

  /** Checks whether the 'locale' field has been set, however the value could be null */
  public boolean hasLocale() {
    return cacheHasKey(CacheKey.locale);
  }

  /** Checks whether the 'vat' field has been set, however the value could be null */
  public boolean hasVat() {
    return cacheHasKey(CacheKey.vat);
  }

  /** Checks whether the 'vatTaxName' field has been set, however the value could be null */
  public boolean hasVatTaxName() {
    return cacheHasKey(CacheKey.vatTaxName);
  }

  /** Checks whether the 'appBillingEnabled' field has been set, however the value could be null */
  public boolean hasAppBillingEnabled() {
    return cacheHasKey(CacheKey.appBillingEnabled);
  }

  /** Checks whether the 'updateStock' field has been set, however the value could be null */
  public boolean hasUpdateStock() {
    return cacheHasKey(CacheKey.updateStock);
  }


  /**
   * Sets the field 'defaultCurrency'.
   */
  public MerchantProperties setDefaultCurrency(java.lang.String defaultCurrency) {
    logChange("defaultCurrency");

    try {
      getJSONObject().put("defaultCurrency", defaultCurrency == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(defaultCurrency));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.defaultCurrency);
    return this;
  }

  /**
   * Sets the field 'tipsEnabled'.
   */
  public MerchantProperties setTipsEnabled(java.lang.Boolean tipsEnabled) {
    logChange("tipsEnabled");

    try {
      getJSONObject().put("tipsEnabled", tipsEnabled == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(tipsEnabled));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tipsEnabled);
    return this;
  }

  /**
   * Sets the field 'receiptProperties'.
   */
  public MerchantProperties setReceiptProperties(java.lang.String receiptProperties) {
    logChange("receiptProperties");

    try {
      getJSONObject().put("receiptProperties", receiptProperties == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(receiptProperties));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.receiptProperties);
    return this;
  }

  /**
   * Sets the field 'summaryHour'.
   */
  public MerchantProperties setSummaryHour(java.lang.Integer summaryHour) {
    logChange("summaryHour");

    try {
      getJSONObject().put("summaryHour", summaryHour == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(summaryHour));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.summaryHour);
    return this;
  }

  /**
   * Sets the field 'signatureThreshold'.
   */
  public MerchantProperties setSignatureThreshold(java.lang.Long signatureThreshold) {
    logChange("signatureThreshold");

    try {
      getJSONObject().put("signatureThreshold", signatureThreshold == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(signatureThreshold));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.signatureThreshold);
    return this;
  }

  /**
   * Sets the field 'tipRateDefault'.
   */
  public MerchantProperties setTipRateDefault(java.lang.Integer tipRateDefault) {
    logChange("tipRateDefault");

    try {
      getJSONObject().put("tipRateDefault", tipRateDefault == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(tipRateDefault));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tipRateDefault);
    return this;
  }

  /**
   * Sets the field 'onPaperTipSignatures'.
   */
  public MerchantProperties setOnPaperTipSignatures(java.lang.Boolean onPaperTipSignatures) {
    logChange("onPaperTipSignatures");

    try {
      getJSONObject().put("onPaperTipSignatures", onPaperTipSignatures == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(onPaperTipSignatures));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.onPaperTipSignatures);
    return this;
  }

  /**
   * Sets the field 'autoLogout'.
   */
  public MerchantProperties setAutoLogout(java.lang.Boolean autoLogout) {
    logChange("autoLogout");

    try {
      getJSONObject().put("autoLogout", autoLogout == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(autoLogout));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.autoLogout);
    return this;
  }

  /**
   * Sets the field 'orderTitle'.
   */
  public MerchantProperties setOrderTitle(com.clover.sdk.v3.merchant.OrderTitle orderTitle) {
    logChange("orderTitle");

    try {
      getJSONObject().put("orderTitle", orderTitle == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(orderTitle));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.orderTitle);
    return this;
  }

  /**
   * Sets the field 'notesOnOrders'.
   */
  public MerchantProperties setNotesOnOrders(java.lang.Boolean notesOnOrders) {
    logChange("notesOnOrders");

    try {
      getJSONObject().put("notesOnOrders", notesOnOrders == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(notesOnOrders));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.notesOnOrders);
    return this;
  }

  /**
   * Sets the field 'deleteOrders'.
   */
  public MerchantProperties setDeleteOrders(java.lang.Boolean deleteOrders) {
    logChange("deleteOrders");

    try {
      getJSONObject().put("deleteOrders", deleteOrders == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(deleteOrders));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.deleteOrders);
    return this;
  }

  /**
   * Sets the field 'removeTaxEnabled'.
   */
  public MerchantProperties setRemoveTaxEnabled(java.lang.Boolean removeTaxEnabled) {
    logChange("removeTaxEnabled");

    try {
      getJSONObject().put("removeTaxEnabled", removeTaxEnabled == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(removeTaxEnabled));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.removeTaxEnabled);
    return this;
  }

  /**
   * Sets the field 'groupLineItems'.
   */
  public MerchantProperties setGroupLineItems(java.lang.Boolean groupLineItems) {
    logChange("groupLineItems");

    try {
      getJSONObject().put("groupLineItems", groupLineItems == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(groupLineItems));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.groupLineItems);
    return this;
  }

  /**
   * Sets the field 'alternateInventoryNames'.
   */
  public MerchantProperties setAlternateInventoryNames(java.lang.Boolean alternateInventoryNames) {
    logChange("alternateInventoryNames");

    try {
      getJSONObject().put("alternateInventoryNames", alternateInventoryNames == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(alternateInventoryNames));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.alternateInventoryNames);
    return this;
  }

  /**
   * Sets the field 'autoPrint'.
   */
  public MerchantProperties setAutoPrint(java.lang.Boolean autoPrint) {
    logChange("autoPrint");

    try {
      getJSONObject().put("autoPrint", autoPrint == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(autoPrint));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.autoPrint);
    return this;
  }

  /**
   * Sets the field 'hardwareProfile'.
   */
  public MerchantProperties setHardwareProfile(java.lang.String hardwareProfile) {
    logChange("hardwareProfile");

    try {
      getJSONObject().put("hardwareProfile", hardwareProfile == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(hardwareProfile));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.hardwareProfile);
    return this;
  }

  /**
   * Sets the field 'shippingAddress'.
   */
  public MerchantProperties setShippingAddress(java.lang.String shippingAddress) {
    logChange("shippingAddress");

    try {
      getJSONObject().put("shippingAddress", shippingAddress == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(shippingAddress));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.shippingAddress);
    return this;
  }

  /**
   * Sets the field 'marketingEnabled'.
   */
  public MerchantProperties setMarketingEnabled(java.lang.Boolean marketingEnabled) {
    logChange("marketingEnabled");

    try {
      getJSONObject().put("marketingEnabled", marketingEnabled == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(marketingEnabled));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.marketingEnabled);
    return this;
  }

  /**
   * Sets the field 'marketingPreferenceText'.
   */
  public MerchantProperties setMarketingPreferenceText(java.lang.String marketingPreferenceText) {
    logChange("marketingPreferenceText");

    try {
      getJSONObject().put("marketingPreferenceText", marketingPreferenceText == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(marketingPreferenceText));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.marketingPreferenceText);
    return this;
  }

  /**
   * Sets the field 'bankMarker'.
   */
  public MerchantProperties setBankMarker(java.lang.Integer bankMarker) {
    logChange("bankMarker");

    try {
      getJSONObject().put("bankMarker", bankMarker == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(bankMarker));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.bankMarker);
    return this;
  }

  /**
   * Sets the field 'supportPhone'.
   */
  public MerchantProperties setSupportPhone(java.lang.String supportPhone) {
    logChange("supportPhone");

    try {
      getJSONObject().put("supportPhone", supportPhone == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(supportPhone));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.supportPhone);
    return this;
  }

  /**
   * Sets the field 'supportEmail'.
   */
  public MerchantProperties setSupportEmail(java.lang.String supportEmail) {
    logChange("supportEmail");

    try {
      getJSONObject().put("supportEmail", supportEmail == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(supportEmail));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.supportEmail);
    return this;
  }

  /**
   * Sets the field 'manualCloseout'.
   */
  public MerchantProperties setManualCloseout(java.lang.Boolean manualCloseout) {
    logChange("manualCloseout");

    try {
      getJSONObject().put("manualCloseout", manualCloseout == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(manualCloseout));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.manualCloseout);
    return this;
  }

  /**
   * Sets the field 'stayInCategory'.
   */
  public MerchantProperties setStayInCategory(java.lang.Boolean stayInCategory) {
    logChange("stayInCategory");

    try {
      getJSONObject().put("stayInCategory", stayInCategory == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(stayInCategory));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.stayInCategory);
    return this;
  }

  /**
   * Sets the field 'locale'.
   */
  public MerchantProperties setLocale(java.lang.String locale) {
    logChange("locale");

    try {
      getJSONObject().put("locale", locale == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(locale));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.locale);
    return this;
  }

  /**
   * Sets the field 'vat'.
   */
  public MerchantProperties setVat(java.lang.Boolean vat) {
    logChange("vat");

    try {
      getJSONObject().put("vat", vat == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(vat));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.vat);
    return this;
  }

  /**
   * Sets the field 'vatTaxName'.
   */
  public MerchantProperties setVatTaxName(java.lang.String vatTaxName) {
    logChange("vatTaxName");

    try {
      getJSONObject().put("vatTaxName", vatTaxName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(vatTaxName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.vatTaxName);
    return this;
  }

  /**
   * Sets the field 'appBillingEnabled'.
   */
  public MerchantProperties setAppBillingEnabled(java.lang.Boolean appBillingEnabled) {
    logChange("appBillingEnabled");

    try {
      getJSONObject().put("appBillingEnabled", appBillingEnabled == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(appBillingEnabled));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.appBillingEnabled);
    return this;
  }

  /**
   * Sets the field 'updateStock'.
   */
  public MerchantProperties setUpdateStock(java.lang.Boolean updateStock) {
    logChange("updateStock");

    try {
      getJSONObject().put("updateStock", updateStock == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(updateStock));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.updateStock);
    return this;
  }


  /** Clears the 'defaultCurrency' field, the 'has' method for this field will now return false */
  public void clearDefaultCurrency() {
    unlogChange("defaultCurrency");
    getJSONObject().remove("defaultCurrency");
    cacheRemoveValue(CacheKey.defaultCurrency);
  }

  /** Clears the 'tipsEnabled' field, the 'has' method for this field will now return false */
  public void clearTipsEnabled() {
    unlogChange("tipsEnabled");
    getJSONObject().remove("tipsEnabled");
    cacheRemoveValue(CacheKey.tipsEnabled);
  }

  /** Clears the 'receiptProperties' field, the 'has' method for this field will now return false */
  public void clearReceiptProperties() {
    unlogChange("receiptProperties");
    getJSONObject().remove("receiptProperties");
    cacheRemoveValue(CacheKey.receiptProperties);
  }

  /** Clears the 'summaryHour' field, the 'has' method for this field will now return false */
  public void clearSummaryHour() {
    unlogChange("summaryHour");
    getJSONObject().remove("summaryHour");
    cacheRemoveValue(CacheKey.summaryHour);
  }

  /** Clears the 'signatureThreshold' field, the 'has' method for this field will now return false */
  public void clearSignatureThreshold() {
    unlogChange("signatureThreshold");
    getJSONObject().remove("signatureThreshold");
    cacheRemoveValue(CacheKey.signatureThreshold);
  }

  /** Clears the 'tipRateDefault' field, the 'has' method for this field will now return false */
  public void clearTipRateDefault() {
    unlogChange("tipRateDefault");
    getJSONObject().remove("tipRateDefault");
    cacheRemoveValue(CacheKey.tipRateDefault);
  }

  /** Clears the 'onPaperTipSignatures' field, the 'has' method for this field will now return false */
  public void clearOnPaperTipSignatures() {
    unlogChange("onPaperTipSignatures");
    getJSONObject().remove("onPaperTipSignatures");
    cacheRemoveValue(CacheKey.onPaperTipSignatures);
  }

  /** Clears the 'autoLogout' field, the 'has' method for this field will now return false */
  public void clearAutoLogout() {
    unlogChange("autoLogout");
    getJSONObject().remove("autoLogout");
    cacheRemoveValue(CacheKey.autoLogout);
  }

  /** Clears the 'orderTitle' field, the 'has' method for this field will now return false */
  public void clearOrderTitle() {
    unlogChange("orderTitle");
    getJSONObject().remove("orderTitle");
    cacheRemoveValue(CacheKey.orderTitle);
  }

  /** Clears the 'notesOnOrders' field, the 'has' method for this field will now return false */
  public void clearNotesOnOrders() {
    unlogChange("notesOnOrders");
    getJSONObject().remove("notesOnOrders");
    cacheRemoveValue(CacheKey.notesOnOrders);
  }

  /** Clears the 'deleteOrders' field, the 'has' method for this field will now return false */
  public void clearDeleteOrders() {
    unlogChange("deleteOrders");
    getJSONObject().remove("deleteOrders");
    cacheRemoveValue(CacheKey.deleteOrders);
  }

  /** Clears the 'removeTaxEnabled' field, the 'has' method for this field will now return false */
  public void clearRemoveTaxEnabled() {
    unlogChange("removeTaxEnabled");
    getJSONObject().remove("removeTaxEnabled");
    cacheRemoveValue(CacheKey.removeTaxEnabled);
  }

  /** Clears the 'groupLineItems' field, the 'has' method for this field will now return false */
  public void clearGroupLineItems() {
    unlogChange("groupLineItems");
    getJSONObject().remove("groupLineItems");
    cacheRemoveValue(CacheKey.groupLineItems);
  }

  /** Clears the 'alternateInventoryNames' field, the 'has' method for this field will now return false */
  public void clearAlternateInventoryNames() {
    unlogChange("alternateInventoryNames");
    getJSONObject().remove("alternateInventoryNames");
    cacheRemoveValue(CacheKey.alternateInventoryNames);
  }

  /** Clears the 'autoPrint' field, the 'has' method for this field will now return false */
  public void clearAutoPrint() {
    unlogChange("autoPrint");
    getJSONObject().remove("autoPrint");
    cacheRemoveValue(CacheKey.autoPrint);
  }

  /** Clears the 'hardwareProfile' field, the 'has' method for this field will now return false */
  public void clearHardwareProfile() {
    unlogChange("hardwareProfile");
    getJSONObject().remove("hardwareProfile");
    cacheRemoveValue(CacheKey.hardwareProfile);
  }

  /** Clears the 'shippingAddress' field, the 'has' method for this field will now return false */
  public void clearShippingAddress() {
    unlogChange("shippingAddress");
    getJSONObject().remove("shippingAddress");
    cacheRemoveValue(CacheKey.shippingAddress);
  }

  /** Clears the 'marketingEnabled' field, the 'has' method for this field will now return false */
  public void clearMarketingEnabled() {
    unlogChange("marketingEnabled");
    getJSONObject().remove("marketingEnabled");
    cacheRemoveValue(CacheKey.marketingEnabled);
  }

  /** Clears the 'marketingPreferenceText' field, the 'has' method for this field will now return false */
  public void clearMarketingPreferenceText() {
    unlogChange("marketingPreferenceText");
    getJSONObject().remove("marketingPreferenceText");
    cacheRemoveValue(CacheKey.marketingPreferenceText);
  }

  /** Clears the 'bankMarker' field, the 'has' method for this field will now return false */
  public void clearBankMarker() {
    unlogChange("bankMarker");
    getJSONObject().remove("bankMarker");
    cacheRemoveValue(CacheKey.bankMarker);
  }

  /** Clears the 'supportPhone' field, the 'has' method for this field will now return false */
  public void clearSupportPhone() {
    unlogChange("supportPhone");
    getJSONObject().remove("supportPhone");
    cacheRemoveValue(CacheKey.supportPhone);
  }

  /** Clears the 'supportEmail' field, the 'has' method for this field will now return false */
  public void clearSupportEmail() {
    unlogChange("supportEmail");
    getJSONObject().remove("supportEmail");
    cacheRemoveValue(CacheKey.supportEmail);
  }

  /** Clears the 'manualCloseout' field, the 'has' method for this field will now return false */
  public void clearManualCloseout() {
    unlogChange("manualCloseout");
    getJSONObject().remove("manualCloseout");
    cacheRemoveValue(CacheKey.manualCloseout);
  }

  /** Clears the 'stayInCategory' field, the 'has' method for this field will now return false */
  public void clearStayInCategory() {
    unlogChange("stayInCategory");
    getJSONObject().remove("stayInCategory");
    cacheRemoveValue(CacheKey.stayInCategory);
  }

  /** Clears the 'locale' field, the 'has' method for this field will now return false */
  public void clearLocale() {
    unlogChange("locale");
    getJSONObject().remove("locale");
    cacheRemoveValue(CacheKey.locale);
  }

  /** Clears the 'vat' field, the 'has' method for this field will now return false */
  public void clearVat() {
    unlogChange("vat");
    getJSONObject().remove("vat");
    cacheRemoveValue(CacheKey.vat);
  }

  /** Clears the 'vatTaxName' field, the 'has' method for this field will now return false */
  public void clearVatTaxName() {
    unlogChange("vatTaxName");
    getJSONObject().remove("vatTaxName");
    cacheRemoveValue(CacheKey.vatTaxName);
  }

  /** Clears the 'appBillingEnabled' field, the 'has' method for this field will now return false */
  public void clearAppBillingEnabled() {
    unlogChange("appBillingEnabled");
    getJSONObject().remove("appBillingEnabled");
    cacheRemoveValue(CacheKey.appBillingEnabled);
  }

  /** Clears the 'updateStock' field, the 'has' method for this field will now return false */
  public void clearUpdateStock() {
    unlogChange("updateStock");
    getJSONObject().remove("updateStock");
    cacheRemoveValue(CacheKey.updateStock);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public MerchantProperties copyChanges() {
    MerchantProperties copy = new MerchantProperties();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(MerchantProperties src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new MerchantProperties(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = jsonString != null ? jsonString : getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "MerchantProperties{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<MerchantProperties> CREATOR = new android.os.Parcelable.Creator<MerchantProperties>() {
    @Override
    public MerchantProperties createFromParcel(android.os.Parcel in) {
      MerchantProperties instance = new MerchantProperties(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public MerchantProperties[] newArray(int size) {
      return new MerchantProperties[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<MerchantProperties> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<MerchantProperties>() {
    @Override
    public MerchantProperties create(org.json.JSONObject jsonObject) {
      return new MerchantProperties(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean DEFAULTCURRENCY_IS_REQUIRED = false;
    public static final long DEFAULTCURRENCY_MAX_LEN = 3;

    public static final boolean TIPSENABLED_IS_REQUIRED = false;

    public static final boolean RECEIPTPROPERTIES_IS_REQUIRED = false;

    public static final boolean SUMMARYHOUR_IS_REQUIRED = false;

    public static final boolean SIGNATURETHRESHOLD_IS_REQUIRED = false;

    public static final boolean TIPRATEDEFAULT_IS_REQUIRED = false;

    public static final boolean ONPAPERTIPSIGNATURES_IS_REQUIRED = false;

    public static final boolean AUTOLOGOUT_IS_REQUIRED = false;

    public static final boolean ORDERTITLE_IS_REQUIRED = false;

    public static final boolean NOTESONORDERS_IS_REQUIRED = false;

    public static final boolean DELETEORDERS_IS_REQUIRED = false;

    public static final boolean REMOVETAXENABLED_IS_REQUIRED = false;

    public static final boolean GROUPLINEITEMS_IS_REQUIRED = false;

    public static final boolean ALTERNATEINVENTORYNAMES_IS_REQUIRED = false;

    public static final boolean AUTOPRINT_IS_REQUIRED = false;

    public static final boolean HARDWAREPROFILE_IS_REQUIRED = false;
    public static final long HARDWAREPROFILE_MAX_LEN = 127;

    public static final boolean SHIPPINGADDRESS_IS_REQUIRED = false;

    public static final boolean MARKETINGENABLED_IS_REQUIRED = false;

    public static final boolean MARKETINGPREFERENCETEXT_IS_REQUIRED = false;
    public static final long MARKETINGPREFERENCETEXT_MAX_LEN = 255;

    public static final boolean BANKMARKER_IS_REQUIRED = false;

    public static final boolean SUPPORTPHONE_IS_REQUIRED = false;
    public static final long SUPPORTPHONE_MAX_LEN = 25;

    public static final boolean SUPPORTEMAIL_IS_REQUIRED = false;
    public static final long SUPPORTEMAIL_MAX_LEN = 127;

    public static final boolean MANUALCLOSEOUT_IS_REQUIRED = false;

    public static final boolean STAYINCATEGORY_IS_REQUIRED = false;

    public static final boolean LOCALE_IS_REQUIRED = false;

    public static final boolean VAT_IS_REQUIRED = false;

    public static final boolean VATTAXNAME_IS_REQUIRED = false;
    public static final long VATTAXNAME_MAX_LEN = 255;

    public static final boolean APPBILLINGENABLED_IS_REQUIRED = false;

    public static final boolean UPDATESTOCK_IS_REQUIRED = false;

  }

}
