/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


package com.clover.sdk.v1.inventory;

@SuppressWarnings("all")
public final class TagItem implements android.os.Parcelable, com.clover.sdk.v1.Validator, com.clover.sdk.v1.JSONifiable {

  private String jsonString = null;
  private org.json.JSONObject jsonObject = null;

  /**
   * Constructs a new empty instance.
   */
  public TagItem() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public TagItem(String json) {
    this.jsonString = json;
  }

  /**
   * Construct a new instance backed by the given JSONObject, be careful the parameter is not copied.
   */
  public TagItem(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance.
   */
  public TagItem(TagItem src) {
    org.json.JSONObject jsonObjectSrc = src.getJSONObject();

    try {
      // Makes a deep copy, but isn't the most performant
      this.jsonObject = new org.json.JSONObject(jsonObjectSrc.toString());
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, be careful the returned object is not a copy.
   */
  public org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = (org.json.JSONObject) new org.json.JSONTokener(jsonString).nextValue();
          jsonString = null; // null this so it will be recreated if jsonObject is modified
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    com.clover.sdk.v1.inventory.Tag tag = getTag();
    if (tag == null) throw new IllegalArgumentException("'tag' is required to be non-null");

    com.clover.sdk.v1.inventory.Item item = getItem();
    if (item == null) throw new IllegalArgumentException("'item' is required to be non-null");
  }


  public com.clover.sdk.v1.inventory.Tag getTag() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("tag");
    if (jsonObj != null) {
      return new com.clover.sdk.v1.inventory.Tag(getJSONObject().optJSONObject("tag"));
    }
    return null;
  }

  public com.clover.sdk.v1.inventory.Item getItem() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("item");
    if (jsonObj != null) {
      return new com.clover.sdk.v1.inventory.Item(getJSONObject().optJSONObject("item"));
    }
    return null;
  }


  /** Checks whether the 'tag' field has been set */
  public boolean hasTag() {
    return getJSONObject().has("tag");
  }

  /** Checks whether the 'item' field has been set */
  public boolean hasItem() {
    return getJSONObject().has("item");
  }


  public TagItem setTag(com.clover.sdk.v1.inventory.Tag tag) {
    try {
      getJSONObject().put("tag", tag.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }

  public TagItem setItem(com.clover.sdk.v1.inventory.Item item) {
    try {
      getJSONObject().put("item", item.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }


  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
    String json = jsonString != null ? jsonString : getJSONObject().toString();
    dest.writeString(json);
  }

  public static final android.os.Parcelable.Creator<TagItem> CREATOR = new android.os.Parcelable.Creator<TagItem>() {
    @Override
    public TagItem createFromParcel(android.os.Parcel in) {
      String json = in.readString();
      return new TagItem(json);
    }

    @Override
    public TagItem[] newArray(int size) {
      return new TagItem[size];
    }
  };


  public interface Constraints {

    public static final boolean TAG_IS_REQUIRED = true;

    public static final boolean ITEM_IS_REQUIRED = true;

  }

}
