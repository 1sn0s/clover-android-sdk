/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


package com.clover.sdk.v1.inventory;

@SuppressWarnings("all")
public class TaxRate implements android.os.Parcelable {

  protected String jsonString = null;
  protected org.json.JSONObject jsonObject = null;

  public TaxRate(String json, boolean ignore) {
    this.jsonString = json;
  }

  public TaxRate(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  public TaxRate(java.lang.String id, java.lang.String name, java.lang.Long rate, java.lang.Boolean isDefault, java.lang.Boolean deleted) throws org.json.JSONException {
    if (name == null) {
      throw new IllegalArgumentException("'name' is required to be non-null");
    }
    if (rate == null) {
      throw new IllegalArgumentException("'rate' is required to be non-null");
    }
    setId(id);
    setName(name);
    setRate(rate);
    setIsDefault(isDefault);
    setDeleted(deleted);
  }

  protected org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = (org.json.JSONObject) new org.json.JSONTokener(jsonString).nextValue();
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      // print some kind of error
    }
    return jsonObject;
  }

  public void validate() {
    if (getName() == null) {
      throw new IllegalArgumentException("'name' is required to be non-null");
    }
    if (getRate() == null) {
      throw new IllegalArgumentException("'rate' is required to be non-null");
    }
    // TODO: also validate string length, valid ranges and other integrity checks
  }

  public java.lang.String getId() {
    return getJSONObject().optString("id");
  }

  public java.lang.String getName() {
    return getJSONObject().optString("name");
  }

  public java.lang.Long getRate() {
    return getJSONObject().optLong("rate");
  }

  public java.lang.Boolean getIsDefault() {
    return getJSONObject().optBoolean("isDefault");
  }

  public java.lang.Boolean getDeleted() {
    return getJSONObject().optBoolean("deleted");
  }


  /**
   * Checks whether the 'id' field has been set
   */
  public boolean hasId() {
    return getJSONObject().has("id");
  }

  /**
   * Checks whether the 'name' field has been set
   */
  public boolean hasName() {
    return getJSONObject().has("name");
  }

  /**
   * Checks whether the 'rate' field has been set
   */
  public boolean hasRate() {
    return getJSONObject().has("rate");
  }

  /**
   * Checks whether the 'isDefault' field has been set
   */
  public boolean hasIsDefault() {
    return getJSONObject().has("isDefault");
  }

  /**
   * Checks whether the 'deleted' field has been set
   */
  public boolean hasDeleted() {
    return getJSONObject().has("deleted");
  }

  public void setId(java.lang.String id) throws org.json.JSONException {
    if (id != null && id.length() > 13) {
      throw new IllegalArgumentException("Maximum string length exceeded for 'id'");
    }
    getJSONObject().put("id", id);
  }

  public void setName(java.lang.String name) throws org.json.JSONException {
    if (name != null && name.length() > 127) {
      throw new IllegalArgumentException("Maximum string length exceeded for 'name'");
    }
    getJSONObject().put("name", name);
  }

  public void setRate(java.lang.Long rate) throws org.json.JSONException {
    if (rate < 0) {
      throw new IllegalArgumentException("Invalid value for 'rate'");
    }
    getJSONObject().put("rate", rate);
  }

  public void setIsDefault(java.lang.Boolean isDefault) throws org.json.JSONException {

    getJSONObject().put("isDefault", isDefault);
  }

  public void setDeleted(java.lang.Boolean deleted) throws org.json.JSONException {

    getJSONObject().put("deleted", deleted);
  }


  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
    String json = jsonString != null ? jsonString : getJSONObject().toString();
    dest.writeString(json);
  }

  public static final android.os.Parcelable.Creator<TaxRate> CREATOR = new android.os.Parcelable.Creator<TaxRate>() {
    public TaxRate createFromParcel(android.os.Parcel in) {
      String json = in.readString();
      return new TaxRate(json, true);
    }

    public TaxRate[] newArray(int size) {
      return new TaxRate[size];
    }
  };

  public static class Builder {

    private java.lang.String id;
    private java.lang.String name;
    private java.lang.Long rate;
    private java.lang.Boolean isDefault;
    private java.lang.Boolean deleted;

    public Builder() {
    }

    public Builder id(java.lang.String id) {
      if (id != null && id.length() > 13) {
        throw new IllegalArgumentException("Maximum string length exceeded for 'id'");
      }
      this.id = id;
      return this;
    }

    public Builder name(java.lang.String name) {
      if (name != null && name.length() > 127) {
        throw new IllegalArgumentException("Maximum string length exceeded for 'name'");
      }
      this.name = name;
      return this;
    }

    public Builder rate(java.lang.Long rate) {
      if (rate < 0) {
        throw new IllegalArgumentException("Invalid value for 'rate'");
      }
      this.rate = rate;
      return this;
    }

    public Builder isDefault(java.lang.Boolean isDefault) {

      this.isDefault = isDefault;
      return this;
    }

    public Builder deleted(java.lang.Boolean deleted) {

      this.deleted = deleted;
      return this;
    }

    public TaxRate build() throws org.json.JSONException {
      return new TaxRate(id, name, rate, isDefault, deleted);
    }
  }

}
