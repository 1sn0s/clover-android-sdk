/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


package com.clover.sdk.v1.inventory;

@SuppressWarnings("all")
public final class Tag implements android.os.Parcelable, com.clover.sdk.v1.Validator, com.clover.sdk.v1.JSONifiable {

  private String jsonString = null;
  private org.json.JSONObject jsonObject = null;

  /**
   * Constructs a new empty instance.
   */
  public Tag() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public Tag(String json) {
    this.jsonString = json;
  }

  /**
   * Construct a new instance backed by the given JSONObject, be careful the parameter is not copied.
   */
  public Tag(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance.
   */
  public Tag(Tag src) {
    org.json.JSONObject jsonObjectSrc = src.getJSONObject();

    try {
      // Makes a deep copy, but isn't the most performant
      this.jsonObject = new org.json.JSONObject(jsonObjectSrc.toString());
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, be careful the returned object is not a copy.
   */
  public org.json.JSONObject getJSONObject() {
    try {
      if (jsonObject == null) {
        if (jsonString != null) {
          jsonObject = (org.json.JSONObject) new org.json.JSONTokener(jsonString).nextValue();
          jsonString = null; // null this so it will be recreated if jsonObject is modified
        } else {
          jsonObject = new org.json.JSONObject();
        }
      }
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String id = getId();
    if (id != null && id.length() > 13) throw new IllegalArgumentException("Maximum string length exceeded for 'id'");

    java.lang.String name = getName();
    if (name == null) throw new IllegalArgumentException("'name' is required to be non-null");
    if (name != null && name.length() > 255) throw new IllegalArgumentException("Maximum string length exceeded for 'name'");
  }


  /**
   * Unique identifier
   */
  public java.lang.String getId() {
    return getJSONObject().isNull("id") ? null :
        getJSONObject().optString("id", null);
  }

  /**
   * Tag name
   */
  public java.lang.String getName() {
    return getJSONObject().isNull("name") ? null :
        getJSONObject().optString("name", null);
  }

  /**
   * Items associated with this tag
   */
  public java.util.List<com.clover.sdk.v1.base.Reference> getItems() {
    java.util.List<com.clover.sdk.v1.base.Reference> itemList = null;
    if (!getJSONObject().isNull("items")) {
      org.json.JSONArray itemArray = getJSONObject().optJSONArray("items");
      itemList = new java.util.ArrayList<com.clover.sdk.v1.base.Reference>(itemArray.length());
      for (int i = 0; i < itemArray.length(); i++) {
        org.json.JSONObject obj = itemArray.optJSONObject(i);
        if (obj == null) {
          continue;
        }
        com.clover.sdk.v1.base.Reference item = new com.clover.sdk.v1.base.Reference(obj);
        itemList.add(item);
      }
    }
    return itemList;
  }


  /** Checks whether the 'id' field has been set */
  public boolean hasId() {
    return getJSONObject().has("id");
  }

  /** Checks whether the 'name' field has been set */
  public boolean hasName() {
    return getJSONObject().has("name");
  }

  /** Checks whether the 'items' field has been set */
  public boolean hasItems() {
    return getJSONObject().has("items");
  }


  public Tag setId(java.lang.String id) {
    try {
      getJSONObject().put("id", id);
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }

  public Tag setName(java.lang.String name) {
    try {
      getJSONObject().put("name", name);
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }

  public Tag setItems(java.util.List<com.clover.sdk.v1.base.Reference> items) {
    try {
      if (items != null) {
        org.json.JSONArray array = new org.json.JSONArray();
        for (com.clover.sdk.v1.base.Reference obj : items) {
          if (obj == null) {
            continue;
          }
          array.put(obj.getJSONObject());
        }
        getJSONObject().put("items", array);
      } else {
        getJSONObject().remove("items");
      }
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException(e);
    }
    return this;
  }


  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
    String json = jsonString != null ? jsonString : getJSONObject().toString();
    dest.writeString(json);
  }

  public static final android.os.Parcelable.Creator<Tag> CREATOR = new android.os.Parcelable.Creator<Tag>() {
    @Override
    public Tag createFromParcel(android.os.Parcel in) {
      String json = in.readString();
      return new Tag(json);
    }

    @Override
    public Tag[] newArray(int size) {
      return new Tag[size];
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean NAME_IS_REQUIRED = true;
    public static final long NAME_MAX_LEN = 255;

    public static final boolean ITEMS_IS_REQUIRED = false;

  }

}
